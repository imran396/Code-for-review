<?php
/**
 * SAM-4720: Refactor logic of System Parameters management pages to editor modules
 *
 * @copyright       2020 Bidpath, Inc.
 * @author          Igor Mironyak
 * @package         com.swb.sam2
 * @version         SVN: $Id: $
 * @since           Feb 21, 2020
 * file encoding    UTF-8
 *
 * Bidpath, Inc., 269 Mt. Hermon Road #102, Scotts Valley, CA 95066, USA
 * Phone: ++1 (415) 543 5825, &lt;info@bidpath.com&gt;
 */

namespace Sam\Settings\Edit\Validate;

use Laminas\Validator\Hostname as HostnameValidator;
use LotItemCustField;
use Payment_Nmi;
use Sam\Auction\AuctionHelperAwareTrait;
use Sam\Auction\Hybrid\FairWarning\Validate\HybridFairWarningValidatorCreateTrait;
use Sam\Core\Constants;
use Sam\Core\Email\Validate\EmailAddressChecker;
use Sam\Core\Math\Floating;
use Sam\Core\Save\ResultStatus\ResultStatus;
use Sam\Core\Save\ResultStatus\ResultStatusCollectorAwareTrait;
use Sam\Core\Service\CustomizableClass;
use Sam\Core\Validate\Number\NumberValidator;
use Sam\Installation\Config\Repository\ConfigRepositoryAwareTrait;
use Sam\Location\PhoneCountry\PhoneCountryHelperAwareTrait;
use Sam\Settings\Edit\Mutual\AuctionParametersMutualContext;
use Sam\Settings\Edit\Normalize\PropertyMetadataProviderCreateTrait;

/**
 * Class AuctionParametersValidator
 * @package Sam\Settings\Edit\Validate
 */
class AuctionParametersValidator extends CustomizableClass
{
    use AuctionHelperAwareTrait;
    use ConfigRepositoryAwareTrait;
    use HybridFairWarningValidatorCreateTrait;
    use PhoneCountryHelperAwareTrait;
    use PropertyMetadataProviderCreateTrait;
    use ResultStatusCollectorAwareTrait;

    /**
     * Last ERR_ index is: 437. Please adjust with actual value on modification.
     */
    public const ERR_AUCTION_PARAMETERS_NOT_EXIST = 0;
    public const ERR_ABOVE_RESERVE_INVALID = 1;
    public const ERR_ABOVE_STARTING_BID_INVALID = 2;
    public const ERR_ABSENTEE_BID_LOT_NOTIFICATION_INVALID = 3;
    public const ERR_ABSENTEE_BIDS_DISPLAY_INVALID = 4;
    public const ERR_ACH_PAYMENT_INVALID = 6;
    public const ERR_ACH_PAYMENT_NMI_INVALID = 8;
    public const ERR_ACH_PAYMENT_PAY_TRACE_INVALID = 9;
    public const ERR_ACH_PAYMENT_OPAYO_INVALID = 11;
    public const ERR_ADD_BIDS_TO_WATCHLIST_INVALID = 12;
    public const ERR_ADD_DESCRIPTION_IN_LOT_NAME_COLUMN_INVALID = 13;
    public const ERR_ADMIN_CSS_FILE_INVALID = 14;
    public const ERR_ADMIN_CUSTOM_JS_URL_INVALID = 437;
    public const ERR_ADMIN_DATE_FORMAT_INVALID = 15;
    public const ERR_AGENT_OPTION_INVALID = 16;
    public const ERR_ALL_USER_REQUIRE_CC_AUTH_INVALID = 17;
    public const ERR_ALLOW_ACCOUNT_ADMIN_ADD_FLOOR_BIDDER_INVALID = 18;
    public const ERR_ALLOW_ACCOUNT_ADMIN_MAKE_BIDDER_PREFERRED_INVALID = 19;
    public const ERR_ALLOW_ANYONE_TO_TELL_A_FRIEND_INVALID = 20;
    public const ERR_ALLOW_BIDDING_DURING_START_GAP_HYBRID_INVALID = 21;
    public const ERR_ALLOW_CONSIGNOR_DELETE_ITEM_INVALID = 25;
    public const ERR_ALLOW_FORCE_BID_INVALID = 29;
    public const ERR_ALLOW_MANUAL_BIDDER_FOR_FLAGGED_BIDDERS_INVALID = 31;
    public const ERR_ALLOW_MULTIBIDS_INVALID = 32;
    public const ERR_ASSIGNED_LOTS_RESTRICTION_INVALID = 33;
    public const ERR_AUC_INC_ACCOUNT_ID_INVALID = 34;
    public const ERR_AUC_INC_BUSINESS_ID_INVALID = 35;
    public const ERR_AUC_INC_DHL_INVALID = 36;
    public const ERR_AUC_INC_DHL_ACCESS_KEY_INVALID = 37;
    public const ERR_AUC_INC_DHL_POSTAL_CODE_INVALID = 38;
    public const ERR_AUC_INC_DIMENSION_TYPE_INVALID = 39;
    public const ERR_AUC_INC_FEDEX_INVALID = 40;
    public const ERR_AUC_INC_HEIGHT_CUST_FILD_ID_INVALID = 41;
    public const ERR_AUC_INC_LENGTH_CUST_FILD_ID_INVALID = 42;
    public const ERR_AUC_INC_METHOD_INVALID = 43;
    public const ERR_AUC_INC_PICKUP_INVALID = 44;
    public const ERR_AUC_INC_UPS_INVALID = 45;
    public const ERR_AUC_INC_USPS_INVALID = 46;
    public const ERR_AUC_INC_WEIGHT_CUST_FILD_ID_INVALID = 47;
    public const ERR_AUC_INC_WEIGHT_TYPE_INVALID = 48;
    public const ERR_AUC_INC_WIDTH_CUST_FILD_ID_INVALID = 49;
    public const ERR_AUCTION_CATALOG_ACCESS_INVALID = 50;
    public const ERR_AUCTION_DATE_IN_SEARCH_INVALID = 51;
    public const ERR_AUCTION_DETAIL_TEMPLATE_INVALID = 52;
    public const ERR_AUCTION_DOMAIN_MODE_INVALID = 53;
    public const ERR_AUCTION_INFO_ACCESS_INVALID = 54;
    public const ERR_AUCTION_LINKS_TO_INVALID = 55;
    public const ERR_AUCTION_LISTING_PAGE_DESC_INVALID = 56;
    public const ERR_AUCTION_LISTING_PAGE_KEYWORD_INVALID = 57;
    public const ERR_AUCTION_LISTING_PAGE_TITLE_INVALID = 58;
    public const ERR_AUCTION_PAGE_DESC_INVALID = 59;
    public const ERR_AUCTION_PAGE_KEYWORD_INVALID = 60;
    public const ERR_AUCTION_PAGE_TITLE_INVALID = 61;
    public const ERR_AUCTION_SEO_URL_TEMPLATE_INVALID = 62;
    public const ERR_AUCTION_VISIBILITY_ACCESS_INVALID = 63;
    public const ERR_AUCTIONEER_FILTER_INVALID = 64;
    public const ERR_AUTH_NET_ACCOUNT_TYPE_INVALID = 65;
    public const ERR_AUTH_NET_CIM_INVALID = 66;
    public const ERR_AUTH_NET_LOGIN_INVALID = 67;
    public const ERR_AUTH_NET_MODE_INVALID = 68;
    public const ERR_AUTH_NET_TRANKEY_INVALID = 69;
    public const ERR_AUTHORIZATION_USE_INVALID = 70;
    public const ERR_AUTO_ASSIGN_ACCOUNT_ADMIN_PRIVILEGES_INVALID = 71;
    public const ERR_AUTO_CONSIGNOR_PRIVILEGES_INVALID = 72;
    public const ERR_AUTO_CREATE_FLOOR_BIDDER_RECORD_INVALID = 73;
    public const ERR_AUTO_INCREMENT_CUSTOMER_NUM_INVALID = 74;
    public const ERR_AUTO_INVOICE_INVALID = 75;
    public const ERR_AUTO_PREFERRED_INVALID = 76;
    public const ERR_AUTO_PREFERRED_CREDIT_CARD_INVALID = 77;
    public const ERR_BID_ACCEPTED_SOUND_INVALID = 83;
    public const ERR_BID_SOUND_INVALID = 84;
    public const ERR_BID_TRACKING_CODE_INVALID = 85;
    public const ERR_BLACKLIST_PHRASE_INVALID = 86;
    public const ERR_BLOCK_SOLD_LOTS_INVALID = 87;
    public const ERR_BUY_NOW_RESTRICTION_INVALID = 88;
    public const ERR_BUY_NOW_UNSOLD_INVALID = 89;
    public const ERR_CASH_DISCOUNT_INVALID = 90;
    public const ERR_CATEGORY_IN_INVOICE_INVALID = 91;
    public const ERR_CC_PAYMENT_INVALID = 92;
    public const ERR_CC_PAYMENT_EWAY_INVALID = 94;
    public const ERR_CC_PAYMENT_NMI_INVALID = 95;
    public const ERR_CC_PAYMENT_PAY_TRACE_INVALID = 96;
    public const ERR_CC_PAYMENT_OPAYO_INVALID = 98;
    public const ERR_CHARGE_CONSIGNOR_COMMISSION_INVALID = 99;
    public const ERR_CLEAR_MESSAGE_CENTER_INVALID = 100;
    public const ERR_CLEAR_MESSAGE_CENTER_LOG_INVALID = 101;
    public const ERR_CONDITIONAL_SALES_INVALID = 102;
    public const ERR_CONFIRM_ADDRESS_SALE_INVALID = 103;
    public const ERR_CONFIRM_MULTIBIDS_INVALID = 104;
    public const ERR_CONFIRM_MULTIBIDS_TEXT_INVALID = 105;
    public const ERR_CONFIRM_TERMS_AND_CONDITIONS_SALE_INVALID = 106;
    public const ERR_CONFIRM_TIMED_BID_INVALID = 107;
    public const ERR_CONFIRM_TIMED_BID_TEXT_INVALID = 108;
    public const ERR_CONSIGNOR_SCHEDULE_HEADER_INVALID = 111;
    public const ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_ALL_CATEGORIES_INVALID = 112;
    public const ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_NO_CATEGORY_LOT_INVALID = 113;
    public const ERR_DEFAULT_COUNTRY_INVALID = 116;
    public const ERR_DEFAULT_COUNTRY_CODE_INVALID = 117;
    public const ERR_DEFAULT_EXPORT_ENCODING_INVALID = 118;
    public const ERR_DEFAULT_IMAGE_PREVIEW_INVALID = 119;
    public const ERR_DEFAULT_IMPORT_ENCODING_INVALID = 120;
    public const ERR_DEFAULT_INVOICE_NOTES_INVALID = 121;
    public const ERR_DEFAULT_LOT_ITEM_NO_TAX_OOS_INVALID = 122;
    public const ERR_DEFAULT_POST_AUC_IMPORT_PREMIUM_INVALID = 124;
    public const ERR_DELAY_AFTER_BID_ACCEPTED_INVALID = 125;
    public const ERR_DELAY_BLOCK_SELL_INVALID = 126;
    public const ERR_DELAY_SOLD_ITEM_INVALID = 127;
    public const ERR_DISPLAY_BIDDER_INFO_INVALID = 128;
    public const ERR_DISPLAY_ITEM_NUM_INVALID = 129;
    public const ERR_DISPLAY_QUANTITY_INVALID = 130;
    public const ERR_DONT_MAKE_USER_BIDDER_INVALID = 131;
    public const ERR_EMAIL_FORMAT_INVALID = 132;
    public const ERR_ENABLE_CONSIGNOR_COMPANY_CLERKING_INVALID = 133;
    public const ERR_ENABLE_CONSIGNOR_PAYMENT_INFO_INVALID = 134;
    public const ERR_ENABLE_PAYPAL_PAYMENTS_INVALID = 136;
    public const ERR_ENABLE_RESELLER_REG_INVALID = 137;
    public const ERR_ENABLE_SECOND_CHANCE_INVALID = 138;
    public const ERR_ENABLE_SMART_PAYMENTS_INVALID = 139;
    public const ERR_ENABLE_USER_COMPANY_INVALID = 140;
    public const ERR_ENABLE_USER_RESUME_INVALID = 141;
    public const ERR_EWAY_ACCOUNT_TYPE_INVALID = 146;
    public const ERR_EWAY_API_KEY_INVALID = 147;
    public const ERR_EWAY_ENCRYPTION_KEY_INVALID = 149;
    public const ERR_EWAY_PASSWORD_INVALID = 150;
    public const ERR_EXTEND_TIME_HYBRID_INVALID = 151;
    public const ERR_EXTEND_TIME_TIMED_INVALID = 152;
    public const ERR_EXTERNAL_JAVASCRIPT_INVALID = 153;
    public const ERR_FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT_INVALID = 154;
    public const ERR_FAILED_LOGIN_ATTEMPT_TIME_INCREMENT_INVALID = 155;
    public const ERR_FAIR_WARNING_SOUND_INVALID = 156;
    public const ERR_FAIR_WARNINGS_HYBRID_INVALID = 157;
    public const ERR_FLOOR_BIDDERS_FROM_DROPDOWN_INVALID = 158;
    public const ERR_FORCE_MAIN_ACCOUNT_DOMAIN_MODE_INVALID = 159;
    public const ERR_GA_BID_TRACKING_INVALID = 160;
    public const ERR_HAMMER_PRICE_BP_INVALID = 161;
    public const ERR_HIDE_BIDDER_NUMBER_INVALID = 162;
    public const ERR_HIDE_COUNTRY_CODE_SELECTION_INVALID = 163;
    public const ERR_HIDE_MOVETOSALE_INVALID = 164;
    public const ERR_HIDE_UNSOLD_LOTS_INVALID = 165;
    public const ERR_IMAGE_AUTO_ORIENT_INVALID = 167;
    public const ERR_IMAGE_OPTIMIZE_INVALID = 168;
    public const ERR_INCLUDE_ACH_INFO_INVALID = 169;
    public const ERR_INCLUDE_BASIC_INFO_INVALID = 170;
    public const ERR_INCLUDE_BILLING_INFO_INVALID = 171;
    public const ERR_INCLUDE_CC_INFO_INVALID = 172;
    public const ERR_INCLUDE_USER_PREFERENCES_INVALID = 173;
    public const ERR_INLINE_BID_CONFIRM_INVALID = 174;
    public const ERR_INVOICE_IDENTIFICATION_INVALID = 175;
    public const ERR_INVOICE_ITEM_DESCRIPTION_INVALID = 176;
    public const ERR_INVOICE_ITEM_SALES_TAX_INVALID = 177;
    public const ERR_INVOICE_ITEM_SALES_TAX_APPLICATION_INVALID = 178;
    public const ERR_INVOICE_ITEM_SEPARATE_TAX_INVALID = 179;
    public const ERR_INVOICE_LOGO_INVALID = 180;
    public const ERR_INVOICE_TAX_DESIGNATION_STRATEGY_INVALID = 433;
    public const ERR_ITEM_NUM_LOCK_INVALID = 181;
    public const ERR_ITEMS_PER_PAGE_INVALID = 182;
    public const ERR_KEEP_DECIMAL_INVOICE_INVALID = 183;
    public const ERR_LANDING_PAGE_INVALID = 184;
    public const ERR_LANDING_PAGE_URL_INVALID = 185;
    public const ERR_LIVE_BIDDING_COUNTDOWN_INVALID = 186;
    public const ERR_LIVE_CHAT_INVALID = 187;
    public const ERR_LIVE_CHAT_VIEW_ALL_INVALID = 188;
    public const ERR_LIVE_VIEW_ACCESS_INVALID = 189;
    public const ERR_LOGIN_DESC_INVALID = 190;
    public const ERR_LOGIN_KEYWORD_INVALID = 191;
    public const ERR_LOGIN_TITLE_INVALID = 192;
    public const ERR_LOGO_LINK_INVALID = 193;
    public const ERR_LOT_BIDDING_HISTORY_ACCESS_INVALID = 194;
    public const ERR_LOT_BIDDING_INFO_ACCESS_INVALID = 195;
    public const ERR_LOT_CATEGORY_GLOBAL_ORDER_AVAILABLE_INVALID = 196;
    public const ERR_LOT_DETAILS_ACCESS_INVALID = 197;
    public const ERR_LOT_ITEM_DETAIL_TEMPLATE_INVALID = 198;
    public const ERR_LOT_ITEM_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID = 199;
    public const ERR_LOT_PAGE_DESC_INVALID = 200;
    public const ERR_LOT_PAGE_KEYWORD_INVALID = 201;
    public const ERR_LOT_PAGE_TITLE_INVALID = 202;
    public const ERR_LOT_SEO_URL_TEMPLATE_INVALID = 203;
    public const ERR_LOT_START_GAP_TIME_HYBRID_INVALID = 204;
    public const ERR_LOT_STARTING_BID_ACCESS_INVALID = 205;
    public const ERR_LOT_STATUS_INVALID = 206;
    public const ERR_LOT_WINNING_BID_ACCESS_INVALID = 207;
    public const ERR_MAIN_MENU_AUCTION_TARGET_INVALID = 208;
    public const ERR_MAKE_PERMANENT_BIDDER_NUM_INVALID = 209;
    public const ERR_MANDATORY_ACH_INFO_INVALID = 210;
    public const ERR_MANDATORY_BASIC_INFO_INVALID = 211;
    public const ERR_MANDATORY_BILLING_INFO_INVALID = 212;
    public const ERR_MANDATORY_CC_INFO_INVALID = 213;
    public const ERR_MANDATORY_USER_PREFERENCES_INVALID = 214;
    public const ERR_MAX_STORED_SEARCHES_INVALID = 215;
    public const ERR_MULTI_CURRENCY_INVALID = 216;
    public const ERR_MULTIPLE_SALE_INVOICE_INVALID = 217;
    public const ERR_MULTIPLE_SALE_SETTLEMENT_INVALID = 218;
    public const ERR_NEWSLETTER_OPTION_INVALID = 219;
    public const ERR_NEXT_BID_BUTTON_INVALID = 220;
    public const ERR_NMI_MODE_INVALID = 221;
    public const ERR_NMI_PASSWORD_INVALID = 222;
    public const ERR_NMI_USERNAME_INVALID = 223;
    public const ERR_NMI_VAULT_INVALID = 224;
    public const ERR_NMI_VAULT_OPTION_INVALID = 225;
    public const ERR_NO_AUTO_AUTHORIZATION_INVALID = 226;
    public const ERR_NO_LOWER_MAXBID_INVALID = 227;
    public const ERR_NOTIFY_ABSENTEE_BIDDERS_INVALID = 229;
    public const ERR_ON_AUCTION_REGISTRATION_INVALID = 231;
    public const ERR_ON_AUCTION_REGISTRATION_AMOUNT_INVALID = 232;
    public const ERR_ON_AUCTION_REGISTRATION_AUTO_INVALID = 233;
    public const ERR_ON_AUCTION_REGISTRATION_EXPIRES_INVALID = 234;
    public const ERR_ON_REGISTRATION_INVALID = 235;
    public const ERR_ON_REGISTRATION_AMOUNT_INVALID = 236;
    public const ERR_ON_REGISTRATION_EXPIRES_INVALID = 237;
    public const ERR_ONE_SALE_GROUPED_INVOICE_INVALID = 238;
    public const ERR_ONLINE_BID_INCOMING_ON_ADMIN_SOUND_INVALID = 239;
    public const ERR_ONLINEBID_BUTTON_INFO_INVALID = 240;
    public const ERR_ONLY_ONE_REG_EMAIL_INVALID = 241;
    public const ERR_OUT_BID_SOUND_INVALID = 242;
    public const ERR_PAGE_HEADER_INVALID = 243;
    public const ERR_PAGE_HEADER_TYPE_INVALID = 244;
    public const ERR_PAGE_REDIRECTION_INVALID = 245;
    public const ERR_PASSED_SOUND_INVALID = 246;
    public const ERR_PAY_TRACE_CIM_INVALID = 247;
    public const ERR_PAY_TRACE_MODE_INVALID = 248;
    public const ERR_PAY_TRACE_PASSWORD_INVALID = 249;
    public const ERR_PAY_TRACE_USERNAME_INVALID = 250;
    public const ERR_PAYMENT_REMINDER_EMAIL_FREQUENCY_INVALID = 251;
    public const ERR_PAYMENT_TRACKING_CODE_INVALID = 252;
    public const ERR_PAYPAL_ACCOUNT_TYPE_INVALID = 253;
    public const ERR_PAYPAL_BN_CODE_INVALID = 254;
    public const ERR_PAYPAL_EMAIL_INVALID = 255;
    public const ERR_PAYPAL_IDENTITY_TOKEN_INVALID = 256;
    public const ERR_PENDING_ACTION_TIMEOUT_HYBRID_INVALID = 257;
    public const ERR_PICKUP_REMINDER_EMAIL_FREQUENCY_INVALID = 258;
    public const ERR_PLACE_BID_REQUIRE_CC_INVALID = 259;
    public const ERR_PLACE_BID_SOUND_INVALID = 260;
    public const ERR_PRIMARY_CURRENCY_ID_INVALID = 261;
    public const ERR_PROCESSING_CHARGE_INVALID = 262;
    public const ERR_PROFILE_BILLING_OPTIONAL_INVALID = 263;
    public const ERR_PROFILE_SHIPPING_OPTIONAL_INVALID = 264;
    public const ERR_PW_HISTORY_REPEAT_INVALID = 265;
    public const ERR_PW_MAX_CONSEQ_LETTER_INVALID = 266;
    public const ERR_PW_MAX_CONSEQ_NUM_INVALID = 267;
    public const ERR_PW_MAX_SEQ_LETTER_INVALID = 268;
    public const ERR_PW_MAX_SEQ_NUM_INVALID = 269;
    public const ERR_PW_MIN_LEN_INVALID = 270;
    public const ERR_PW_MIN_LETTER_INVALID = 271;
    public const ERR_PW_MIN_NUM_INVALID = 272;
    public const ERR_PW_MIN_SPECIAL_INVALID = 273;
    public const ERR_PW_RENEW_INVALID = 274;
    public const ERR_PW_REQ_MIXED_CASE_INVALID = 275;
    public const ERR_PW_TMP_TIMEOUT_INVALID = 276;
    public const ERR_QUANTITY_IN_INVOICE_INVALID = 277;
    public const ERR_QUANTITY_IN_SETTLEMENT_INVALID = 278;
    public const ERR_REG_CONFIRM_AUTO_APPROVE_INVALID = 279;
    public const ERR_REG_CONFIRM_PAGE_INVALID = 280;
    public const ERR_REG_CONFIRM_PAGE_CONTENT_INVALID = 281;
    public const ERR_REG_REMINDER_EMAIL_INVALID = 282;
    public const ERR_REG_USE_HIGH_BIDDER_INVALID = 283;
    public const ERR_REGISTRATION_REQUIRE_CC_INVALID = 284;
    public const ERR_REQUIRE_IDENTIFICATION_INVALID = 285;
    public const ERR_REQUIRE_ON_INC_BIDS_INVALID = 286;
    public const ERR_REQUIRE_REENTER_CC_INVALID = 287;
    public const ERR_RESERVE_MET_NOTICE_INVALID = 288;
    public const ERR_RESERVE_NOT_MET_NOTICE_INVALID = 289;
    public const ERR_RESET_TIMER_ON_UNDO_HYBRID_INVALID = 290;
    public const ERR_RESPONSIVE_CSS_FILE_INVALID = 291;
    public const ERR_RESPONSIVE_HEADER_ADDRESS_INVALID = 292;
    public const ERR_RESPONSIVE_HTML_HEAD_CODE_INVALID = 436;
    public const ERR_REVOKE_PREFERRED_BIDDER_INVALID = 293;
    public const ERR_RTB_DETAIL_TEMPLATE_INVALID = 295;
    public const ERR_RTB_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID = 296;
    public const ERR_OPAYO_3DSECURE_INVALID = 301;
    public const ERR_OPAYO_AVSCV2_INVALID = 302;
    public const ERR_OPAYO_CURRENCY_INVALID = 303;
    public const ERR_OPAYO_MODE_INVALID = 304;
    public const ERR_OPAYO_SEND_EMAIL_INVALID = 305;
    public const ERR_OPAYO_TOKEN_INVALID = 306;
    public const ERR_OPAYO_VENDOR_NAME_INVALID = 308;
    public const ERR_OPAYO_AUTH_TRANSACTION_TYPE_INVALID = 429;
    public const ERR_SALES_TAX_INVALID = 309;
    public const ERR_SALES_TAX_SERVICES_INVALID = 310;
    public const ERR_SAM_TAX_INVALID = 311;
    public const ERR_SAM_TAX_DEFAULT_COUNTRY_INVALID = 312;
    public const ERR_SAVE_RESELLER_CERT_IN_PROFILE_INVALID = 313;
    public const ERR_SEARCH_RESULTS_FORMAT_INVALID = 315;
    public const ERR_SEARCH_RESULTS_PAGE_DESC_INVALID = 316;
    public const ERR_SEARCH_RESULTS_PAGE_KEYWORD_INVALID = 317;
    public const ERR_SEARCH_RESULTS_PAGE_TITLE_INVALID = 318;
    public const ERR_SEND_CONFIRMATION_LINK_INVALID = 319;
    public const ERR_SEND_RESULTS_ONCE_INVALID = 320;
    public const ERR_SETTLEMENT_LOGO_INVALID = 321;
    public const ERR_SETTLEMENT_UNPAID_LOTS_INVALID = 322;
    public const ERR_SHARE_USER_INFO_INVALID = 323;
    public const ERR_SHARE_USER_STATS_INVALID = 324;
    public const ERR_SHIPPING_CHARGE_INVALID = 325;
    public const ERR_SHIPPING_INFO_BOX_INVALID = 326;
    public const ERR_SHOW_AUCTION_STARTS_ENDING_INVALID = 327;
    public const ERR_SHOW_COUNTDOWN_SECONDS_INVALID = 328;
    public const ERR_SHOW_HIGH_EST_INVALID = 329;
    public const ERR_SHOW_LOW_EST_INVALID = 330;
    public const ERR_SHOW_MEMBER_MENU_ITEMS_INVALID = 331;
    public const ERR_SHOW_PORT_NOTICE_INVALID = 332;
    public const ERR_SHOW_USER_RESUME_INVALID = 334;
    public const ERR_SHOW_WINNER_IN_CATALOG_INVALID = 335;
    public const ERR_SIGNUP_DESC_INVALID = 336;
    public const ERR_SIGNUP_KEYWORD_INVALID = 337;
    public const ERR_SIGNUP_TITLE_INVALID = 338;
    public const ERR_SIGNUP_TRACKING_CODE_INVALID = 339;
    public const ERR_SIMPLIFIED_SIGNUP_INVALID = 340;
    public const ERR_SLIDESHOW_PROJECTOR_ONLY_INVALID = 341;
    public const ERR_SMART_PAY_ACCOUNT_TYPE_INVALID = 342;
    public const ERR_SMART_PAY_MERCHANT_ACCOUNT_INVALID = 343;
    public const ERR_SMART_PAY_MERCHANT_MODE_INVALID = 344;
    public const ERR_SMART_PAY_MODE_INVALID = 345;
    public const ERR_SMART_PAY_SHARED_SECRET_INVALID = 346;
    public const ERR_SMART_PAY_SKIN_CODE_INVALID = 347;
    public const ERR_SMTP_AUTH_INVALID = 348;
    public const ERR_SMTP_PASSWORD_INVALID = 349;
    public const ERR_SMTP_PORT_INVALID = 350;
    public const ERR_SMTP_SERVER_INVALID = 351;
    public const ERR_SMTP_SSL_TYPE_INVALID = 352;
    public const ERR_SMTP_USERNAME_INVALID = 353;
    public const ERR_SOLD_NOT_WON_SOUND_INVALID = 354;
    public const ERR_SOLD_WON_SOUND_INVALID = 355;
    public const ERR_STAY_ON_ACCOUNT_DOMAIN_INVALID = 358;
    public const ERR_STLM_CHECK_ENABLED_INVALID = 419;
    public const ERR_STLM_CHECK_ADDRESS_COORD_X_INVALID = 413;
    public const ERR_STLM_CHECK_ADDRESS_COORD_Y_INVALID = 414;
    public const ERR_STLM_CHECK_AMOUNT_COORD_X_INVALID = 359;
    public const ERR_STLM_CHECK_AMOUNT_COORD_X_REQUIRED = 423;
    public const ERR_STLM_CHECK_AMOUNT_COORD_Y_INVALID = 360;
    public const ERR_STLM_CHECK_AMOUNT_COORD_Y_REQUIRED = 424;
    public const ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_INVALID = 409;
    public const ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_REQUIRED = 425;
    public const ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_INVALID = 410;
    public const ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_REQUIRED = 426;
    public const ERR_STLM_CHECK_DATE_COORD_X_INVALID = 361;
    public const ERR_STLM_CHECK_DATE_COORD_X_REQUIRED = 427;
    public const ERR_STLM_CHECK_DATE_COORD_Y_INVALID = 362;
    public const ERR_STLM_CHECK_DATE_COORD_Y_REQUIRED = 428;
    public const ERR_STLM_CHECK_FILE_INVALID = 363;
    public const ERR_STLM_CHECK_FILE_HEIGHT_EMPTY = 420;
    public const ERR_STLM_CHECK_MEMO_COORD_X_INVALID = 411;
    public const ERR_STLM_CHECK_MEMO_COORD_Y_INVALID = 412;
    public const ERR_STLM_CHECK_NAME_COORD_X_INVALID = 364;
    public const ERR_STLM_CHECK_NAME_COORD_X_REQUIRED = 421;
    public const ERR_STLM_CHECK_NAME_COORD_Y_INVALID = 365;
    public const ERR_STLM_CHECK_NAME_COORD_Y_REQUIRED = 422;
    public const ERR_STLM_CHECK_HEIGHT_INVALID = 415;
    public const ERR_STLM_CHECK_HEIGHT_REQUIRED = 416;
    public const ERR_STLM_CHECK_PER_PAGE_INVALID = 417;
    public const ERR_STLM_CHECK_REPEAT_COUNT_INVALID = 418;
    public const ERR_SUGGESTED_STARTING_BID_INVALID = 366;
    public const ERR_SUPPORT_EMAIL_INVALID = 367;
    public const ERR_SWITCH_FRAME_SECONDS_INVALID = 368;
    public const ERR_TAKE_MAX_BIDS_UNDER_RESERVE_INVALID = 369;
    public const ERR_TELL_A_FRIEND_INVALID = 370;
    public const ERR_TEXT_MSG_API_NOTIFICATION_INVALID = 371;
    public const ERR_TEXT_MSG_API_OUTBID_NOTIFICATION_INVALID = 372;
    public const ERR_TEXT_MSG_API_POST_VAR_INVALID = 373;
    public const ERR_TEXT_MSG_API_URL_INVALID = 374;
    public const ERR_TEXT_MSG_ENABLED_INVALID = 375;
    public const ERR_TIMED_ABOVE_RESERVE_INVALID = 376;
    public const ERR_TIMED_ABOVE_STARTING_BID_INVALID = 377;
    public const ERR_TIMEZONE_INVALID = 378;
    public const ERR_TIMEZONE_REQUIRED = 408;
    public const ERR_TWENTY_MESSAGES_MAX_INVALID = 379;
    public const ERR_US_NUMBER_FORMATTING_INVALID = 381;
    public const ERR_USE_ALTERNATE_PDF_CATALOG_INVALID = 382;
    public const ERR_VERIFY_EMAIL_INVALID = 383;
    public const ERR_VIEW_LANGUAGE_INVALID = 384;
    public const ERR_VISIBLE_AUCTION_STATUSES_INVALID = 385;
    public const ERR_WAVEBID_ENDPOINT_INVALID = 386;
    public const ERR_WAVEBID_UAT_INVALID = 387;
    public const ERR_FAIR_WARNING_HYBRID_FORMAT = 388;
    public const ERR_ON_AUCTION_REGISTRATION_AMOUNT_REQUIRED = 389;
    public const ERR_EXTEND_TIME_HYBRID_REQUIRED = 391;
    public const ERR_PENDING_ACTION_TIMEOUT_HYBRID_REQUIRED = 392;
    public const ERR_ON_REGISTRATION_AMOUNT_REQUIRED = 394;
    public const ERR_DEFAULT_COUNTRY_CODE_REQUIRED = 395;
    public const ERR_ON_REGISTRATION_PAYMENT_GATEWAY_NOT_DEFINED = 396;
    public const ERR_PAYPAL_EMAIL_REQUIRED = 397;
    public const ERR_AUTH_NET_LOGIN_REQUIRED = 398;
    public const ERR_AUTH_NET_TRANKEY_REQUIRED = 399;
    public const ERR_LANDING_PAGE_URL_REQUIRED = 405;
    public const ERR_LOCALE_INVALID = 406;
    public const ERR_ADMIN_LANGUAGE_INVALID = 407;
    public const ERR_QUANTITY_DIGITS_INVALID = 430;
    public const ERR_GRAPHQL_CORS_ALLOW_ORIGIN_HOST_INVALID = 431;
    public const ERR_GRAPHQL_CORS_ALLOW_ORIGIN_URL_SCHEME_INVALID = 432;
    public const ERR_INVOICE_HP_TAX_SCHEMA_ID_INVALID = 434;
    public const ERR_INVOICE_BP_TAX_SCHEMA_ID_INVALID = 435;
    public const ERR_INVOICE_SERVICES_TAX_SCHEMA_ID_INVALID = 438;
    public const ERR_INVOICE_HP_TAX_SCHEMA_COUNTRY_MISMATCH = 439;
    public const ERR_INVOICE_BP_TAX_SCHEMA_COUNTRY_MISMATCH = 440;
    public const ERR_INVOICE_SERVICES_TAX_SCHEMA_COUNTRY_MISMATCH = 441;

    public const WARN_CC_AUTH_ON_AUCTION_REGISTRATION = 1;

    private const INVALID_FORMAT_DEFAULT_MESSAGE = 'Invalid format';

    protected const ERROR_MESSAGES = [
        self::ERR_ABOVE_RESERVE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ABOVE_STARTING_BID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ABSENTEE_BIDS_DISPLAY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ABSENTEE_BID_LOT_NOTIFICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ACH_PAYMENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ACH_PAYMENT_NMI_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ACH_PAYMENT_OPAYO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ACH_PAYMENT_PAY_TRACE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADD_BIDS_TO_WATCHLIST_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADD_DESCRIPTION_IN_LOT_NAME_COLUMN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADMIN_CSS_FILE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADMIN_CUSTOM_JS_URL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADMIN_DATE_FORMAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ADMIN_LANGUAGE_INVALID => 'Invalid language',
        self::ERR_AGENT_OPTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_ACCOUNT_ADMIN_ADD_FLOOR_BIDDER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_ACCOUNT_ADMIN_MAKE_BIDDER_PREFERRED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_ANYONE_TO_TELL_A_FRIEND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_BIDDING_DURING_START_GAP_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_CONSIGNOR_DELETE_ITEM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_FORCE_BID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_MANUAL_BIDDER_FOR_FLAGGED_BIDDERS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALLOW_MULTIBIDS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ALL_USER_REQUIRE_CC_AUTH_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ASSIGNED_LOTS_RESTRICTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTIONEER_FILTER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_CATALOG_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_DATE_IN_SEARCH_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_DETAIL_TEMPLATE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_DOMAIN_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_INFO_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_LINKS_TO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_LISTING_PAGE_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_LISTING_PAGE_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_LISTING_PAGE_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_PAGE_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_PAGE_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_PAGE_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_PARAMETERS_NOT_EXIST => 'Auction parameters not exist',
        self::ERR_AUCTION_SEO_URL_TEMPLATE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUCTION_VISIBILITY_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_ACCOUNT_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_BUSINESS_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_DHL_ACCESS_KEY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_DHL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_DHL_POSTAL_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_DIMENSION_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_FEDEX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_HEIGHT_CUST_FILD_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_LENGTH_CUST_FILD_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_METHOD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_PICKUP_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_UPS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_USPS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_WEIGHT_CUST_FILD_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_WEIGHT_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUC_INC_WIDTH_CUST_FILD_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTHORIZATION_USE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_ACCOUNT_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_CIM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_LOGIN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_LOGIN_REQUIRED => 'Required',
        self::ERR_AUTH_NET_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_TRANKEY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTH_NET_TRANKEY_REQUIRED => 'Required',
        self::ERR_AUTO_ASSIGN_ACCOUNT_ADMIN_PRIVILEGES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_CONSIGNOR_PRIVILEGES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_CREATE_FLOOR_BIDDER_RECORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_INCREMENT_CUSTOMER_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_PREFERRED_CREDIT_CARD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_AUTO_PREFERRED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BID_ACCEPTED_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BID_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BID_TRACKING_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BLACKLIST_PHRASE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BLOCK_SOLD_LOTS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BUY_NOW_RESTRICTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_BUY_NOW_UNSOLD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CASH_DISCOUNT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CATEGORY_IN_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CC_PAYMENT_EWAY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CC_PAYMENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CC_PAYMENT_NMI_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CC_PAYMENT_OPAYO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CC_PAYMENT_PAY_TRACE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CHARGE_CONSIGNOR_COMMISSION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CLEAR_MESSAGE_CENTER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CLEAR_MESSAGE_CENTER_LOG_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONDITIONAL_SALES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_ADDRESS_SALE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_MULTIBIDS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_MULTIBIDS_TEXT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_TERMS_AND_CONDITIONS_SALE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_TIMED_BID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONFIRM_TIMED_BID_TEXT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CONSIGNOR_SCHEDULE_HEADER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_ALL_CATEGORIES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_NO_CATEGORY_LOT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_COUNTRY_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_COUNTRY_CODE_REQUIRED => 'Please first select "Default Country Code"',
        self::ERR_DEFAULT_COUNTRY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_EXPORT_ENCODING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_IMAGE_PREVIEW_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_IMPORT_ENCODING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_INVOICE_NOTES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_LOT_ITEM_NO_TAX_OOS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DEFAULT_POST_AUC_IMPORT_PREMIUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DELAY_AFTER_BID_ACCEPTED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DELAY_BLOCK_SELL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DELAY_SOLD_ITEM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DISPLAY_BIDDER_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DISPLAY_ITEM_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DISPLAY_QUANTITY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_DONT_MAKE_USER_BIDDER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EMAIL_FORMAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_CONSIGNOR_COMPANY_CLERKING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_CONSIGNOR_PAYMENT_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_PAYPAL_PAYMENTS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_RESELLER_REG_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_SECOND_CHANCE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_SMART_PAYMENTS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_USER_COMPANY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ENABLE_USER_RESUME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EWAY_ACCOUNT_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EWAY_API_KEY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EWAY_ENCRYPTION_KEY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EWAY_PASSWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EXTEND_TIME_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EXTEND_TIME_HYBRID_REQUIRED => 'Value is required',
        self::ERR_EXTEND_TIME_TIMED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_EXTERNAL_JAVASCRIPT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FAILED_LOGIN_ATTEMPT_TIME_INCREMENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FAIR_WARNINGS_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FAIR_WARNING_HYBRID_FORMAT => 'Should correspond format "seconds left:warning text" on each line',
        self::ERR_FAIR_WARNING_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FLOOR_BIDDERS_FROM_DROPDOWN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_FORCE_MAIN_ACCOUNT_DOMAIN_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_GA_BID_TRACKING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_HAMMER_PRICE_BP_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_HIDE_BIDDER_NUMBER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_HIDE_COUNTRY_CODE_SELECTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_HIDE_MOVETOSALE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_HIDE_UNSOLD_LOTS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_IMAGE_AUTO_ORIENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_IMAGE_OPTIMIZE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INCLUDE_ACH_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INCLUDE_BASIC_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INCLUDE_BILLING_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INCLUDE_CC_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INCLUDE_USER_PREFERENCES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INLINE_BID_CONFIRM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_IDENTIFICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_ITEM_DESCRIPTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_ITEM_SALES_TAX_APPLICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_ITEM_SALES_TAX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_ITEM_SEPARATE_TAX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_LOGO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_INVOICE_TAX_DESIGNATION_STRATEGY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ITEMS_PER_PAGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ITEM_NUM_LOCK_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_KEEP_DECIMAL_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LANDING_PAGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LANDING_PAGE_URL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LANDING_PAGE_URL_REQUIRED => 'Required',
        self::ERR_LIVE_BIDDING_COUNTDOWN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LIVE_CHAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LIVE_CHAT_VIEW_ALL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LIVE_VIEW_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOCALE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOGIN_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOGIN_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOGIN_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOGO_LINK_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_BIDDING_HISTORY_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_BIDDING_INFO_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_CATEGORY_GLOBAL_ORDER_AVAILABLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_DETAILS_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_ITEM_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_ITEM_DETAIL_TEMPLATE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_PAGE_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_PAGE_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_PAGE_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_SEO_URL_TEMPLATE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_STARTING_BID_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_START_GAP_TIME_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_STATUS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_LOT_WINNING_BID_ACCESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MAIN_MENU_AUCTION_TARGET_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MAKE_PERMANENT_BIDDER_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MANDATORY_ACH_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MANDATORY_BASIC_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MANDATORY_BILLING_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MANDATORY_CC_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MANDATORY_USER_PREFERENCES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MAX_STORED_SEARCHES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MULTIPLE_SALE_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MULTIPLE_SALE_SETTLEMENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_MULTI_CURRENCY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NEWSLETTER_OPTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NEXT_BID_BUTTON_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NMI_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NMI_PASSWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NMI_USERNAME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NMI_VAULT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NMI_VAULT_OPTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NOTIFY_ABSENTEE_BIDDERS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NO_AUTO_AUTHORIZATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_NO_LOWER_MAXBID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ONE_SALE_GROUPED_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ONLINEBID_BUTTON_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ONLINE_BID_INCOMING_ON_ADMIN_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ONLY_ONE_REG_EMAIL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_AUCTION_REGISTRATION_AMOUNT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_AUCTION_REGISTRATION_AMOUNT_REQUIRED => 'Please set an amount higher than zero',
        self::ERR_ON_AUCTION_REGISTRATION_AUTO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_AUCTION_REGISTRATION_EXPIRES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_AUCTION_REGISTRATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_REGISTRATION_AMOUNT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_REGISTRATION_AMOUNT_REQUIRED => 'Please set an amount higher than zero',
        self::ERR_ON_REGISTRATION_EXPIRES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_REGISTRATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_ON_REGISTRATION_PAYMENT_GATEWAY_NOT_DEFINED => 'A payment gateway needs to be defined and selected to be used for authorization',
        self::ERR_OPAYO_3DSECURE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_AUTH_TRANSACTION_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_AVSCV2_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_CURRENCY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_SEND_EMAIL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_TOKEN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OPAYO_VENDOR_NAME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_OUT_BID_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAGE_HEADER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAGE_HEADER_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAGE_REDIRECTION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PASSED_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYMENT_REMINDER_EMAIL_FREQUENCY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYMENT_TRACKING_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYPAL_ACCOUNT_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYPAL_BN_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYPAL_EMAIL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAYPAL_EMAIL_REQUIRED => 'Required',
        self::ERR_PAYPAL_IDENTITY_TOKEN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAY_TRACE_CIM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAY_TRACE_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAY_TRACE_PASSWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PAY_TRACE_USERNAME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PENDING_ACTION_TIMEOUT_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PENDING_ACTION_TIMEOUT_HYBRID_REQUIRED => 'Value is required',
        self::ERR_PICKUP_REMINDER_EMAIL_FREQUENCY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PLACE_BID_REQUIRE_CC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PLACE_BID_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PRIMARY_CURRENCY_ID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PROCESSING_CHARGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PROFILE_BILLING_OPTIONAL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PROFILE_SHIPPING_OPTIONAL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_HISTORY_REPEAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MAX_CONSEQ_LETTER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MAX_CONSEQ_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MAX_SEQ_LETTER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MAX_SEQ_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MIN_LEN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MIN_LETTER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MIN_NUM_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_MIN_SPECIAL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_RENEW_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_REQ_MIXED_CASE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_PW_TMP_TIMEOUT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_QUANTITY_DIGITS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_QUANTITY_IN_INVOICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_QUANTITY_IN_SETTLEMENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REGISTRATION_REQUIRE_CC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REG_CONFIRM_AUTO_APPROVE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REG_CONFIRM_PAGE_CONTENT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REG_CONFIRM_PAGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REG_REMINDER_EMAIL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REG_USE_HIGH_BIDDER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REQUIRE_IDENTIFICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REQUIRE_ON_INC_BIDS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REQUIRE_REENTER_CC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESERVE_MET_NOTICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESERVE_NOT_MET_NOTICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESET_TIMER_ON_UNDO_HYBRID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESPONSIVE_CSS_FILE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESPONSIVE_HEADER_ADDRESS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RESPONSIVE_HTML_HEAD_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_REVOKE_PREFERRED_BIDDER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RTB_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_RTB_DETAIL_TEMPLATE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SALES_TAX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SALES_TAX_SERVICES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SAM_TAX_DEFAULT_COUNTRY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SAM_TAX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SAVE_RESELLER_CERT_IN_PROFILE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEARCH_RESULTS_FORMAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEARCH_RESULTS_PAGE_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEARCH_RESULTS_PAGE_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEARCH_RESULTS_PAGE_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEND_CONFIRMATION_LINK_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SEND_RESULTS_ONCE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SETTLEMENT_LOGO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SETTLEMENT_UNPAID_LOTS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHARE_USER_INFO_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHARE_USER_STATS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHIPPING_CHARGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHIPPING_INFO_BOX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_AUCTION_STARTS_ENDING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_COUNTDOWN_SECONDS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_HIGH_EST_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_LOW_EST_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_MEMBER_MENU_ITEMS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_PORT_NOTICE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_USER_RESUME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SHOW_WINNER_IN_CATALOG_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SIGNUP_DESC_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SIGNUP_KEYWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SIGNUP_TITLE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SIGNUP_TRACKING_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SIMPLIFIED_SIGNUP_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SLIDESHOW_PROJECTOR_ONLY_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_ACCOUNT_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_MERCHANT_ACCOUNT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_MERCHANT_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_MODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_SHARED_SECRET_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMART_PAY_SKIN_CODE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_AUTH_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_PASSWORD_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_PORT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_SERVER_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_SSL_TYPE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SMTP_USERNAME_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SOLD_NOT_WON_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SOLD_WON_SOUND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STAY_ON_ACCOUNT_DOMAIN_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_ADDRESS_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_ADDRESS_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_AMOUNT_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_AMOUNT_COORD_X_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_AMOUNT_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_AMOUNT_COORD_Y_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_DATE_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_DATE_COORD_X_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_DATE_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_DATE_COORD_Y_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_ENABLED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_FILE_HEIGHT_EMPTY => 'Enter the correct Check height',
        self::ERR_STLM_CHECK_FILE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_HEIGHT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_HEIGHT_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_MEMO_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_MEMO_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_NAME_COORD_X_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_NAME_COORD_X_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_NAME_COORD_Y_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_NAME_COORD_Y_REQUIRED => 'Required',
        self::ERR_STLM_CHECK_PER_PAGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_STLM_CHECK_REPEAT_COUNT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SUGGESTED_STARTING_BID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_SUPPORT_EMAIL_INVALID => 'Enter the correct email address',
        self::ERR_SWITCH_FRAME_SECONDS_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TAKE_MAX_BIDS_UNDER_RESERVE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TELL_A_FRIEND_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TEXT_MSG_API_NOTIFICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TEXT_MSG_API_OUTBID_NOTIFICATION_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TEXT_MSG_API_POST_VAR_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TEXT_MSG_API_URL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TEXT_MSG_ENABLED_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TIMED_ABOVE_RESERVE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TIMED_ABOVE_STARTING_BID_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TIMEZONE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_TIMEZONE_REQUIRED => 'Required',
        self::ERR_TWENTY_MESSAGES_MAX_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_USE_ALTERNATE_PDF_CATALOG_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_US_NUMBER_FORMATTING_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_VERIFY_EMAIL_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_VIEW_LANGUAGE_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_VISIBLE_AUCTION_STATUSES_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_WAVEBID_ENDPOINT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_WAVEBID_UAT_INVALID => self::INVALID_FORMAT_DEFAULT_MESSAGE,
        self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_URL_SCHEME_INVALID => 'Invalid Url scheme for "%s"',
        self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_HOST_INVALID => 'Invalid host name "%s"',
        self::ERR_INVOICE_HP_TAX_SCHEMA_ID_INVALID => 'Invalid',
        self::ERR_INVOICE_BP_TAX_SCHEMA_ID_INVALID => 'Invalid',
        self::ERR_INVOICE_SERVICES_TAX_SCHEMA_ID_INVALID => 'Invalid',
        self::ERR_INVOICE_HP_TAX_SCHEMA_COUNTRY_MISMATCH => 'Country Mismatch',
        self::ERR_INVOICE_BP_TAX_SCHEMA_COUNTRY_MISMATCH => 'Country Mismatch',
        self::ERR_INVOICE_SERVICES_TAX_SCHEMA_COUNTRY_MISMATCH => 'Country Mismatch',
    ];

    private const WARNING_MESSAGES = [
        self::WARN_CC_AUTH_ON_AUCTION_REGISTRATION => 'A payment gateway needs to be defined and selected to be used for authorization'
    ];

    private AuctionParametersMutualContext $context;

    /**
     * Class instantiation method
     * @return static
     */
    public static function new(): static
    {
        return parent::_new(self::class);
    }

    public function initInstance(): static
    {
        $this->getResultStatusCollector()->construct(self::ERROR_MESSAGES, [], self::WARNING_MESSAGES);
        return $this;
    }

    /**
     * @param AuctionParametersMutualContext $context
     * @return static
     */
    public function construct(AuctionParametersMutualContext $context): static
    {
        $this->context = $context;
        return $this;
    }

    /**
     * @return AuctionParametersMutualContext
     */
    public function getContext(): AuctionParametersMutualContext
    {
        return $this->context;
    }

    /**
     * @return bool
     */
    public function validate(): bool
    {
        $this->checkAuctionParametersExistence(self::ERR_AUCTION_PARAMETERS_NOT_EXIST);
        $this->checkPropertiesType();
        if (!$this->hasErrors()) {
            $this->checkCustomConstraints();
        }

        if ($this->hasErrors()) {
            log_debug(
                'Failed validation before settings save'
                . composeSuffix(['err' => $this->getResultStatusCollector()->getErrorCodes()])
            );
        }

        return !$this->hasErrors();
    }

    /**
     * @return ResultStatus[]
     */
    public function errorStatuses(): array
    {
        return $this->getResultStatusCollector()->getErrorStatuses();
    }

    /**
     * @return int[]
     * @internal
     */
    public function errorCodes(): array
    {
        return $this->getResultStatusCollector()->getErrorCodes();
    }

    /**
     * @return int[]
     * @internal
     */
    public function warningCodes(): array
    {
        return $this->getResultStatusCollector()->getWarningCodes();
    }

    /**
     * @return bool
     */
    public function hasErrors(): bool
    {
        return $this->getResultStatusCollector()->hasError();
    }

    /**
     * @return ResultStatus[]
     */
    public function warningStatuses(): array
    {
        return $this->getResultStatusCollector()->getWarningStatuses();
    }

    private function checkCustomConstraints(): void
    {
        $this->checkPositiveOrZero(Constants\Setting::LOT_START_GAP_TIME_HYBRID, self::ERR_LOT_START_GAP_TIME_HYBRID_INVALID);
        $this->checkRange(
            Constants\Setting::EXTEND_TIME_HYBRID,
            self::ERR_EXTEND_TIME_HYBRID_INVALID,
            ['min' => $this->cfg()->get('core->auction->hybrid->extendTime->minLimit')]
        );
        $this->checkFairWarningFormat(Constants\Setting::FAIR_WARNINGS_HYBRID, self::ERR_FAIR_WARNING_HYBRID_FORMAT);
        $this->checkRequired(Constants\Setting::EXTEND_TIME_HYBRID, self::ERR_EXTEND_TIME_HYBRID_REQUIRED);
        $this->checkRequired(
            Constants\Setting::PENDING_ACTION_TIMEOUT_HYBRID,
            self::ERR_PENDING_ACTION_TIMEOUT_HYBRID_REQUIRED
        );
        $this->checkPositive(
            Constants\Setting::PENDING_ACTION_TIMEOUT_HYBRID,
            self::ERR_PENDING_ACTION_TIMEOUT_HYBRID_INVALID
        );
        $this->checkChoice(
            Constants\Setting::AUCTION_LINKS_TO,
            self::ERR_AUCTION_LINKS_TO_INVALID,
            array_keys(Constants\SettingAuction::AUCTION_LINKS_TO_NAMES)
        );
        $this->checkChoice(
            Constants\Setting::SHIPPING_INFO_BOX,
            self::ERR_SHIPPING_INFO_BOX_INVALID,
            array_keys(Constants\SettingAuction::SHIPPING_INFO_TYPES)
        );
        $this->checkRange(
            Constants\Setting::ITEMS_PER_PAGE,
            self::ERR_ITEMS_PER_PAGE_INVALID,
            ['min' => 10]
        );
        $intervals = Constants\RegistrationReminder::$intervalHourNames;
        if ($this->cfg()->get('core->reminder->registration->interval') === Constants\RegistrationReminder::INTERVAL_ONCE_PER_DAY) {
            $intervals = array_diff_key($intervals, array_flip(Constants\RegistrationReminder::INTERVALS_LESS_THAN_DAY));
        }
        $this->checkChoice(
            Constants\Setting::REG_REMINDER_EMAIL,
            self::ERR_REG_REMINDER_EMAIL_INVALID,
            array_keys($intervals)
        );
        $this->checkRange(
            Constants\Setting::VISIBLE_AUCTION_STATUSES,
            self::ERR_VISIBLE_AUCTION_STATUSES_INVALID,
            ['min' => 0, 'max' => 15]
        );
        $this->checkChoice(
            Constants\Setting::AUCTION_DOMAIN_MODE,
            self::ERR_AUCTION_DOMAIN_MODE_INVALID,
            $this->detectAvailableDomainModes()
        );
        $this->checkChoice(
            Constants\Setting::DISPLAY_BIDDER_INFO,
            self::ERR_DISPLAY_BIDDER_INFO_INVALID,
            array_keys(Constants\SettingAuction::DISPLAY_BIDDER_INFO_NAMES)
        );
        $this->checkCcAuthOnAuctionRegistration(self::WARN_CC_AUTH_ON_AUCTION_REGISTRATION);
        $this->checkOnAuctionRegistrationAmount(self::ERR_ON_AUCTION_REGISTRATION_AMOUNT_REQUIRED);
        $this->checkEmail(Constants\Setting::SUPPORT_EMAIL, self::ERR_SUPPORT_EMAIL_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::SMTP_PORT, self::ERR_SMTP_PORT_INVALID);
        $this->checkChoice(Constants\Setting::SMTP_SSL_TYPE, self::ERR_SMTP_SSL_TYPE_INVALID, [0, 1, 2]);
        $this->checkChoice(
            Constants\Setting::EMAIL_FORMAT,
            self::ERR_EMAIL_FORMAT_INVALID,
            [
                Constants\SettingSystem::EF_PLAIN,
                Constants\SettingSystem::EF_HTML
            ]
        );
        $encodings = $this->getContext()->getDataProvider()->getAvailableEncodings();
        $this->checkChoice(
            Constants\Setting::DEFAULT_IMPORT_ENCODING,
            self::ERR_DEFAULT_IMPORT_ENCODING_INVALID,
            $encodings
        );
        $this->checkChoice(
            Constants\Setting::DEFAULT_EXPORT_ENCODING,
            self::ERR_DEFAULT_EXPORT_ENCODING_INVALID,
            $encodings
        );
        $this->checkPositiveOrZero(Constants\Setting::DELAY_AFTER_BID_ACCEPTED, self::ERR_DELAY_AFTER_BID_ACCEPTED_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::SWITCH_FRAME_SECONDS, self::ERR_SWITCH_FRAME_SECONDS_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::DELAY_SOLD_ITEM, self::ERR_DELAY_SOLD_ITEM_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::DELAY_BLOCK_SELL, self::ERR_DELAY_BLOCK_SELL_INVALID);
        $this->checkChoice(
            Constants\Setting::ABSENTEE_BIDS_DISPLAY,
            self::ERR_ABSENTEE_BIDS_DISPLAY_INVALID,
            array_keys(Constants\SettingAuction::ABSENTEE_BID_DISPLAY_OPTIONS)
        );
        $this->checkChoice(
            Constants\Setting::ONLINEBID_BUTTON_INFO,
            self::ERR_ONLINEBID_BUTTON_INFO_INVALID,
            array_keys(Constants\UserButtonInfo::$availableInfo)
        );
        $this->checkChoice(
            Constants\Setting::BUY_NOW_RESTRICTION,
            self::ERR_BUY_NOW_RESTRICTION_INVALID,
            [
                Constants\SettingRtb::BNLR_AUCTION_STARTED,
                Constants\SettingRtb::BNLR_LOT_STARTED
            ]
        );
        $this->checkRequired(Constants\Setting::TIMEZONE_ID, self::ERR_TIMEZONE_REQUIRED);
        $this->checkChoice(
            Constants\Setting::TIMEZONE_ID,
            self::ERR_TIMEZONE_INVALID,
            $this->getContext()->getDataProvider()->getAvailableTimezoneLocations()
        );
        $this->checkChoice(
            Constants\Setting::DEFAULT_COUNTRY,
            self::ERR_DEFAULT_COUNTRY_INVALID,
            array_keys(Constants\Country::$names)
        );
        $this->checkChoice(
            Constants\Setting::ADMIN_DATE_FORMAT,
            self::ERR_ADMIN_DATE_FORMAT_INVALID,
            array_keys(Constants\Date::$dateTimeFormats)
        );
        $this->checkChoice(
            Constants\Setting::LOT_STATUS,
            self::ERR_LOT_STATUS_INVALID,
            Constants\MySearch::$assignReadyLotStatusFilters
        );
        $this->checkChoice(
            Constants\Setting::SHARE_USER_INFO,
            self::ERR_SHARE_USER_INFO_INVALID,
            array_keys(Constants\ShareUserInfo::$names)
        );
        $this->checkPositiveOrZero(Constants\Setting::EXTEND_TIME_TIMED, self::ERR_EXTEND_TIME_TIMED_INVALID);
        $this->checkOnRegistrationAmount(self::ERR_ON_REGISTRATION_AMOUNT_REQUIRED);
        $this->checkPositiveOrZero(Constants\Setting::MAX_STORED_SEARCHES, self::ERR_MAX_STORED_SEARCHES_INVALID);
        $this->checkDefaultCountryCode(self::ERR_DEFAULT_COUNTRY_CODE_REQUIRED);

        $countryCodes = array_map('intval', $this->getPhoneCountryHelper()->getCountryNamesToCodes());
        $this->checkChoice(
            Constants\Setting::DEFAULT_COUNTRY_CODE,
            self::ERR_DEFAULT_COUNTRY_CODE_INVALID,
            $countryCodes
        );

        $this->checkOnRegistration(self::ERR_ON_REGISTRATION_PAYMENT_GATEWAY_NOT_DEFINED);
        $this->checkChoice(
            Constants\Setting::ON_REGISTRATION,
            self::ERR_ON_REGISTRATION_INVALID,
            Constants\Billing::CC_VERIFICATIONS
        );
        $this->checkChoice(
            Constants\Setting::ON_AUCTION_REGISTRATION,
            self::ERR_ON_AUCTION_REGISTRATION_INVALID,
            Constants\Billing::CC_VERIFICATIONS,
        );
        $this->checkPositiveOrZero(Constants\Setting::PW_MIN_LEN, self::ERR_PW_MIN_LEN_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::PW_MIN_LETTER, self::ERR_PW_MIN_LETTER_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::PW_MIN_NUM, self::ERR_PW_MIN_NUM_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::PW_MIN_SPECIAL, self::ERR_PW_MIN_SPECIAL_INVALID);
        $this->checkIntPositiveOrZeroNotOne(Constants\Setting::PW_MAX_SEQ_LETTER, self::ERR_PW_MAX_SEQ_LETTER_INVALID);
        $this->checkIntPositiveOrZeroNotOne(Constants\Setting::PW_MAX_CONSEQ_LETTER, self::ERR_PW_MAX_CONSEQ_LETTER_INVALID);
        $this->checkIntPositiveOrZeroNotOne(Constants\Setting::PW_MAX_SEQ_NUM, self::ERR_PW_MAX_SEQ_NUM_INVALID);
        $this->checkIntPositiveOrZeroNotOne(Constants\Setting::PW_MAX_CONSEQ_NUM, self::ERR_PW_MAX_CONSEQ_NUM_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::PW_TMP_TIMEOUT, self::ERR_PW_TMP_TIMEOUT_INVALID);
        $this->checkPositiveOrZero(
            Constants\Setting::FAILED_LOGIN_ATTEMPT_TIME_INCREMENT,
            self::ERR_FAILED_LOGIN_ATTEMPT_TIME_INCREMENT_INVALID
        );
        $this->checkPositiveOrZero(
            Constants\Setting::FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT,
            self::ERR_FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT_INVALID
        );
        $this->checkChoice(
            Constants\Setting::SHOW_USER_RESUME,
            self::ERR_SHOW_USER_RESUME_INVALID,
            [
                Constants\SettingUser::SUR_ALL,
                Constants\SettingUser::SUR_NONE
            ]
        );
        $this->checkChoice(
            Constants\Setting::PW_HISTORY_REPEAT,
            self::ERR_PW_HISTORY_REPEAT_INVALID,
            [0, 1, 2, 3, 4, 5]
        );
        $this->checkRange(
            Constants\Setting::PW_RENEW,
            self::ERR_PW_RENEW_INVALID,
            ['min' => -1]
        );
        $this->checkNetAuthCredentials();
        $this->checkNmiVaultOption(self::ERR_NMI_VAULT_OPTION_INVALID);
        $this->checkChoice(Constants\Setting::NMI_VAULT_OPTION, self::ERR_NMI_VAULT_OPTION_INVALID, array_keys(Payment_Nmi::$vaultOption));
        $this->checkChoice(Constants\Setting::OPAYO_AVSCV2, self::ERR_OPAYO_AVSCV2_INVALID, array_keys(Constants\BillingOpayo::$avsCv2Options));
        $this->checkChoice(Constants\Setting::OPAYO_3DSECURE, self::ERR_OPAYO_3DSECURE_INVALID, array_keys(Constants\BillingOpayo::$secure3dOptions));
        $this->checkChoice(Constants\Setting::OPAYO_SEND_EMAIL, self::ERR_OPAYO_3DSECURE_INVALID, array_keys(Constants\BillingOpayo::$sendEmailOptions));
        $this->checkChoice(Constants\Setting::OPAYO_MODE, self::ERR_OPAYO_MODE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_MODE_NAMES));
        $this->checkChoice(
            Constants\Setting::OPAYO_AUTH_TRANSACTION_TYPE,
            self::ERR_OPAYO_AUTH_TRANSACTION_TYPE_INVALID,
            array_keys(Constants\BillingOpayo::$authoriseTransactionTypes)
        );
        $this->checkChoice(Constants\Setting::NMI_MODE, self::ERR_NMI_MODE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_MODE_NAMES));
        $this->checkChoice(Constants\Setting::PAY_TRACE_MODE, self::ERR_PAY_TRACE_MODE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_MODE_NAMES));
        $this->checkChoice(Constants\Setting::SMART_PAY_MODE, self::ERR_SMART_PAY_MODE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_MODE_NAMES));
        $this->checkChoice(Constants\Setting::AUTH_NET_MODE, self::ERR_AUTH_NET_MODE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_MODE_NAMES));
        $this->checkChoice(Constants\Setting::EWAY_ACCOUNT_TYPE, self::ERR_EWAY_ACCOUNT_TYPE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_TYPE_NAMES));
        $this->checkChoice(Constants\Setting::AUC_INC_METHOD, self::ERR_AUC_INC_METHOD_INVALID, array_keys(Constants\SettingShippingAuctionInc::AUC_INC_METHOD_NAMES));
        $this->checkChoice(Constants\Setting::SMART_PAY_ACCOUNT_TYPE, self::ERR_SMART_PAY_ACCOUNT_TYPE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_TYPE_NAMES));
        $this->checkChoice(Constants\Setting::SMART_PAY_MERCHANT_MODE, self::ERR_SMART_PAY_MERCHANT_MODE_INVALID, array_keys(Constants\BillingSmartPay::$merchantModeNames));
        $this->checkChoice(Constants\Setting::PAYPAL_ACCOUNT_TYPE, self::ERR_PAYPAL_ACCOUNT_TYPE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_TYPE_NAMES));
        $this->checkChoice(Constants\Setting::AUTH_NET_ACCOUNT_TYPE, self::ERR_AUTH_NET_ACCOUNT_TYPE_INVALID, array_keys(Constants\Billing::PAYMENT_ACCOUNT_TYPE_NAMES));
        $this->checkChoice(Constants\Setting::INVOICE_ITEM_SALES_TAX_APPLICATION, self::ERR_INVOICE_ITEM_SALES_TAX_APPLICATION_INVALID, Constants\User::TAX_APPLICATIONS);
        $this->checkChoice(Constants\Setting::INVOICE_TAX_DESIGNATION_STRATEGY, self::ERR_INVOICE_TAX_DESIGNATION_STRATEGY_INVALID, Constants\Invoice::TAX_DESIGNATION_STRATEGIES);
        $this->checkChoice(Constants\Setting::SAM_TAX_DEFAULT_COUNTRY, self::ERR_SAM_TAX_DEFAULT_COUNTRY_INVALID, array_keys(Constants\Country::$names));
        $this->checkNumericLotCustomFieldChoice(Constants\Setting::AUC_INC_WEIGHT_CUST_FIELD_ID, self::ERR_AUC_INC_WEIGHT_CUST_FILD_ID_INVALID);
        $this->checkNumericLotCustomFieldChoice(Constants\Setting::AUC_INC_WIDTH_CUST_FIELD_ID, self::ERR_AUC_INC_WIDTH_CUST_FILD_ID_INVALID);
        $this->checkNumericLotCustomFieldChoice(Constants\Setting::AUC_INC_HEIGHT_CUST_FIELD_ID, self::ERR_AUC_INC_HEIGHT_CUST_FILD_ID_INVALID);
        $this->checkNumericLotCustomFieldChoice(Constants\Setting::AUC_INC_LENGTH_CUST_FIELD_ID, self::ERR_AUC_INC_LENGTH_CUST_FILD_ID_INVALID);

        $this->checkPaypalEmail(self::ERR_PAYPAL_EMAIL_REQUIRED);
        $this->checkPositiveOrZero(Constants\Setting::SALES_TAX, self::ERR_SALES_TAX_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::CASH_DISCOUNT, self::ERR_CASH_DISCOUNT_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::SHIPPING_CHARGE, self::ERR_SHIPPING_CHARGE_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::PROCESSING_CHARGE, self::ERR_PROCESSING_CHARGE_INVALID);
        $this->checkPositiveOrZero(Constants\Setting::CHARGE_CONSIGNOR_COMMISSION, self::ERR_CHARGE_CONSIGNOR_COMMISSION_INVALID);

        // Settlement check related validations
        $this->checkRequired(Constants\Setting::STLM_CHECK_HEIGHT, self::ERR_STLM_CHECK_HEIGHT_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_HEIGHT, self::ERR_STLM_CHECK_HEIGHT_INVALID);
        $this->checkSettlementCheckHeightRequired(self::ERR_STLM_CHECK_FILE_HEIGHT_EMPTY);
        $this->checkRequired(Constants\Setting::STLM_CHECK_NAME_COORD_X, self::ERR_STLM_CHECK_NAME_COORD_X_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_NAME_COORD_X, self::ERR_STLM_CHECK_NAME_COORD_X_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_NAME_COORD_Y, self::ERR_STLM_CHECK_NAME_COORD_Y_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_NAME_COORD_Y, self::ERR_STLM_CHECK_NAME_COORD_Y_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_AMOUNT_COORD_X, self::ERR_STLM_CHECK_AMOUNT_COORD_X_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_AMOUNT_COORD_X, self::ERR_STLM_CHECK_AMOUNT_COORD_X_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_AMOUNT_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_COORD_Y_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_AMOUNT_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_COORD_Y_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_X, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_X, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_DATE_COORD_X, self::ERR_STLM_CHECK_DATE_COORD_X_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_DATE_COORD_X, self::ERR_STLM_CHECK_DATE_COORD_X_INVALID);
        $this->checkRequired(Constants\Setting::STLM_CHECK_DATE_COORD_Y, self::ERR_STLM_CHECK_DATE_COORD_Y_REQUIRED);
        $this->checkPositive(Constants\Setting::STLM_CHECK_DATE_COORD_Y, self::ERR_STLM_CHECK_DATE_COORD_Y_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_MEMO_COORD_X, self::ERR_STLM_CHECK_MEMO_COORD_X_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_MEMO_COORD_Y, self::ERR_STLM_CHECK_MEMO_COORD_Y_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_ADDRESS_COORD_X, self::ERR_STLM_CHECK_ADDRESS_COORD_X_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_ADDRESS_COORD_Y, self::ERR_STLM_CHECK_ADDRESS_COORD_Y_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_PER_PAGE, self::ERR_STLM_CHECK_PER_PAGE_INVALID);
        $this->checkPositive(Constants\Setting::STLM_CHECK_REPEAT_COUNT, self::ERR_STLM_CHECK_REPEAT_COUNT_INVALID);

        $this->checkPositive(Constants\Setting::AUC_INC_BUSINESS_ID, self::ERR_AUC_INC_BUSINESS_ID_INVALID);
        $this->checkPositive(Constants\Setting::AUC_INC_DHL_ACCESS_KEY, self::ERR_AUC_INC_DHL_ACCESS_KEY_INVALID);

        $this->checkLandingPageUrl();
        $this->checkChoice(
            Constants\Setting::PAGE_HEADER_TYPE,
            self::ERR_PAGE_HEADER_TYPE_INVALID,
            [
                Constants\SettingUi::PHT_TEXT,
                Constants\SettingUi::PHT_URL,
                Constants\SettingUi::PHT_LOGO
            ]
        );
        $this->checkChoice(
            Constants\Setting::SEARCH_RESULTS_FORMAT,
            self::ERR_SEARCH_RESULTS_FORMAT_INVALID,
            array_keys(Constants\SettingUi::SEARCH_RESULTS_FORMAT_NAMES)
        );
        $this->checkChoice(
            Constants\Setting::LANDING_PAGE,
            self::ERR_LANDING_PAGE_INVALID,
            [
                Constants\SettingUi::LP_AUCTION,
                Constants\SettingUi::LP_SEARCH,
                Constants\SettingUi::LP_OTHER
            ]
        );
        $this->checkChoice(Constants\Setting::LOCALE, self::ERR_LOCALE_INVALID, $this->getContext()->getDataProvider()->getLocales());
        $this->checkChoice(Constants\Setting::ADMIN_LANGUAGE, self::ERR_ADMIN_LANGUAGE_INVALID, $this->getContext()->getDataProvider()->getAvailableAdminLanguages());
        $this->checkChoice(
            Constants\Setting::ASSIGNED_LOTS_RESTRICTION,
            self::ERR_ASSIGNED_LOTS_RESTRICTION_INVALID,
            Constants\SettingAuction::ASSIGNED_LOTS_RESTRICTIONS
        );
        $this->checkChoice(Constants\Setting::AUC_INC_WEIGHT_TYPE, self::ERR_AUC_INC_WEIGHT_TYPE_INVALID, array_keys(Constants\AuctionInc::WEIGHT_UOM_VALUE));
        $this->checkChoice(Constants\Setting::AUC_INC_DIMENSION_TYPE, self::ERR_AUC_INC_DIMENSION_TYPE_INVALID, array_keys(Constants\AuctionInc::DIMENSION_UOM_VALUE));
        $this->checkRange(
            Constants\Setting::QUANTITY_DIGITS,
            self::ERR_QUANTITY_DIGITS_INVALID,
            ['min' => 0, 'max' => Constants\Lot::LOT_QUANTITY_MAX_FRACTIONAL_DIGITS]
        );
        $this->checkGraphQlCorsAllowedOrigins();
        $this->checkTaxSchema();
    }

    private function checkPropertiesType(): void
    {
        $this->checkType(Constants\Setting::ABOVE_RESERVE, self::ERR_ABOVE_RESERVE_INVALID);
        $this->checkType(Constants\Setting::ABOVE_STARTING_BID, self::ERR_ABOVE_STARTING_BID_INVALID);
        $this->checkType(Constants\Setting::ABSENTEE_BID_LOT_NOTIFICATION, self::ERR_ABSENTEE_BID_LOT_NOTIFICATION_INVALID);
        $this->checkType(Constants\Setting::ABSENTEE_BIDS_DISPLAY, self::ERR_ABSENTEE_BIDS_DISPLAY_INVALID);
        $this->checkType(Constants\Setting::ACH_PAYMENT, self::ERR_ACH_PAYMENT_INVALID);
        $this->checkType(Constants\Setting::ACH_PAYMENT_NMI, self::ERR_ACH_PAYMENT_NMI_INVALID);
        $this->checkType(Constants\Setting::ACH_PAYMENT_PAY_TRACE, self::ERR_ACH_PAYMENT_PAY_TRACE_INVALID);
        $this->checkType(Constants\Setting::ACH_PAYMENT_OPAYO, self::ERR_ACH_PAYMENT_OPAYO_INVALID);
        $this->checkType(Constants\Setting::ADD_BIDS_TO_WATCHLIST, self::ERR_ADD_BIDS_TO_WATCHLIST_INVALID);
        $this->checkType(Constants\Setting::ADD_DESCRIPTION_IN_LOT_NAME_COLUMN, self::ERR_ADD_DESCRIPTION_IN_LOT_NAME_COLUMN_INVALID);
        $this->checkType(Constants\Setting::ADMIN_CSS_FILE, self::ERR_ADMIN_CSS_FILE_INVALID);
        $this->checkType(Constants\Setting::ADMIN_CUSTOM_JS_URL, self::ERR_ADMIN_CUSTOM_JS_URL_INVALID);
        $this->checkType(Constants\Setting::ADMIN_DATE_FORMAT, self::ERR_ADMIN_DATE_FORMAT_INVALID);
        $this->checkType(Constants\Setting::AGENT_OPTION, self::ERR_AGENT_OPTION_INVALID);
        $this->checkType(Constants\Setting::ALL_USER_REQUIRE_CC_AUTH, self::ERR_ALL_USER_REQUIRE_CC_AUTH_INVALID);
        $this->checkType(Constants\Setting::ALLOW_ACCOUNT_ADMIN_ADD_FLOOR_BIDDER, self::ERR_ALLOW_ACCOUNT_ADMIN_ADD_FLOOR_BIDDER_INVALID);
        $this->checkType(Constants\Setting::ALLOW_ACCOUNT_ADMIN_MAKE_BIDDER_PREFERRED, self::ERR_ALLOW_ACCOUNT_ADMIN_MAKE_BIDDER_PREFERRED_INVALID);
        $this->checkType(Constants\Setting::ALLOW_ANYONE_TO_TELL_A_FRIEND, self::ERR_ALLOW_ANYONE_TO_TELL_A_FRIEND_INVALID);
        $this->checkType(Constants\Setting::ALLOW_BIDDING_DURING_START_GAP_HYBRID, self::ERR_ALLOW_BIDDING_DURING_START_GAP_HYBRID_INVALID);
        $this->checkType(Constants\Setting::ALLOW_CONSIGNOR_DELETE_ITEM, self::ERR_ALLOW_CONSIGNOR_DELETE_ITEM_INVALID);
        $this->checkType(Constants\Setting::ALLOW_FORCE_BID, self::ERR_ALLOW_FORCE_BID_INVALID);
        $this->checkType(Constants\Setting::ALLOW_MANUAL_BIDDER_FOR_FLAGGED_BIDDERS, self::ERR_ALLOW_MANUAL_BIDDER_FOR_FLAGGED_BIDDERS_INVALID);
        $this->checkType(Constants\Setting::ALLOW_MULTIBIDS, self::ERR_ALLOW_MULTIBIDS_INVALID);
        $this->checkType(Constants\Setting::ASSIGNED_LOTS_RESTRICTION, self::ERR_ASSIGNED_LOTS_RESTRICTION_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_ACCOUNT_ID, self::ERR_AUC_INC_ACCOUNT_ID_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_BUSINESS_ID, self::ERR_AUC_INC_BUSINESS_ID_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_DHL, self::ERR_AUC_INC_DHL_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_DHL_ACCESS_KEY, self::ERR_AUC_INC_DHL_ACCESS_KEY_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_DHL_POSTAL_CODE, self::ERR_AUC_INC_DHL_POSTAL_CODE_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_DIMENSION_TYPE, self::ERR_AUC_INC_DIMENSION_TYPE_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_FEDEX, self::ERR_AUC_INC_FEDEX_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_HEIGHT_CUST_FIELD_ID, self::ERR_AUC_INC_HEIGHT_CUST_FILD_ID_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_LENGTH_CUST_FIELD_ID, self::ERR_AUC_INC_LENGTH_CUST_FILD_ID_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_METHOD, self::ERR_AUC_INC_METHOD_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_PICKUP, self::ERR_AUC_INC_PICKUP_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_UPS, self::ERR_AUC_INC_UPS_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_USPS, self::ERR_AUC_INC_USPS_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_WEIGHT_CUST_FIELD_ID, self::ERR_AUC_INC_WEIGHT_CUST_FILD_ID_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_WEIGHT_TYPE, self::ERR_AUC_INC_WEIGHT_TYPE_INVALID);
        $this->checkType(Constants\Setting::AUC_INC_WIDTH_CUST_FIELD_ID, self::ERR_AUC_INC_WIDTH_CUST_FILD_ID_INVALID);
        $this->checkType(Constants\Setting::AUCTION_CATALOG_ACCESS, self::ERR_AUCTION_CATALOG_ACCESS_INVALID);
        $this->checkType(Constants\Setting::AUCTION_DATE_IN_SEARCH, self::ERR_AUCTION_DATE_IN_SEARCH_INVALID);
        $this->checkType(Constants\Setting::AUCTION_DETAIL_TEMPLATE, self::ERR_AUCTION_DETAIL_TEMPLATE_INVALID);
        $this->checkType(Constants\Setting::AUCTION_DOMAIN_MODE, self::ERR_AUCTION_DOMAIN_MODE_INVALID);
        $this->checkType(Constants\Setting::AUCTION_INFO_ACCESS, self::ERR_AUCTION_INFO_ACCESS_INVALID);
        $this->checkType(Constants\Setting::AUCTION_LINKS_TO, self::ERR_AUCTION_LINKS_TO_INVALID);
        $this->checkType(Constants\Setting::AUCTION_LISTING_PAGE_DESC, self::ERR_AUCTION_LISTING_PAGE_DESC_INVALID);
        $this->checkType(Constants\Setting::AUCTION_LISTING_PAGE_KEYWORD, self::ERR_AUCTION_LISTING_PAGE_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::AUCTION_LISTING_PAGE_TITLE, self::ERR_AUCTION_LISTING_PAGE_TITLE_INVALID);
        $this->checkType(Constants\Setting::AUCTION_PAGE_DESC, self::ERR_AUCTION_PAGE_DESC_INVALID);
        $this->checkType(Constants\Setting::AUCTION_PAGE_KEYWORD, self::ERR_AUCTION_PAGE_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::AUCTION_PAGE_TITLE, self::ERR_AUCTION_PAGE_TITLE_INVALID);
        $this->checkType(Constants\Setting::AUCTION_SEO_URL_TEMPLATE, self::ERR_AUCTION_SEO_URL_TEMPLATE_INVALID);
        $this->checkType(Constants\Setting::AUCTION_VISIBILITY_ACCESS, self::ERR_AUCTION_VISIBILITY_ACCESS_INVALID);
        $this->checkType(Constants\Setting::AUCTIONEER_FILTER, self::ERR_AUCTIONEER_FILTER_INVALID);
        $this->checkType(Constants\Setting::AUTH_NET_ACCOUNT_TYPE, self::ERR_AUTH_NET_ACCOUNT_TYPE_INVALID);
        $this->checkType(Constants\Setting::AUTH_NET_CIM, self::ERR_AUTH_NET_CIM_INVALID);
        $this->checkType(Constants\Setting::AUTH_NET_LOGIN, self::ERR_AUTH_NET_LOGIN_INVALID);
        $this->checkType(Constants\Setting::AUTH_NET_MODE, self::ERR_AUTH_NET_MODE_INVALID);
        $this->checkType(Constants\Setting::AUTH_NET_TRANKEY, self::ERR_AUTH_NET_TRANKEY_INVALID);
        $this->checkType(Constants\Setting::AUTHORIZATION_USE, self::ERR_AUTHORIZATION_USE_INVALID);
        $this->checkType(Constants\Setting::AUTO_ASSIGN_ACCOUNT_ADMIN_PRIVILEGES, self::ERR_AUTO_ASSIGN_ACCOUNT_ADMIN_PRIVILEGES_INVALID);
        $this->checkType(Constants\Setting::AUTO_CONSIGNOR_PRIVILEGES, self::ERR_AUTO_CONSIGNOR_PRIVILEGES_INVALID);
        $this->checkType(Constants\Setting::AUTO_CREATE_FLOOR_BIDDER_RECORD, self::ERR_AUTO_CREATE_FLOOR_BIDDER_RECORD_INVALID);
        $this->checkType(Constants\Setting::AUTO_INCREMENT_CUSTOMER_NUM, self::ERR_AUTO_INCREMENT_CUSTOMER_NUM_INVALID);
        $this->checkType(Constants\Setting::AUTO_INVOICE, self::ERR_AUTO_INVOICE_INVALID);
        $this->checkType(Constants\Setting::AUTO_PREFERRED, self::ERR_AUTO_PREFERRED_INVALID);
        $this->checkType(Constants\Setting::AUTO_PREFERRED_CREDIT_CARD, self::ERR_AUTO_PREFERRED_CREDIT_CARD_INVALID);
        $this->checkType(Constants\Setting::BID_ACCEPTED_SOUND, self::ERR_BID_ACCEPTED_SOUND_INVALID);
        $this->checkType(Constants\Setting::BID_SOUND, self::ERR_BID_SOUND_INVALID);
        $this->checkType(Constants\Setting::BID_TRACKING_CODE, self::ERR_BID_TRACKING_CODE_INVALID);
        $this->checkType(Constants\Setting::BLACKLIST_PHRASE, self::ERR_BLACKLIST_PHRASE_INVALID);
        $this->checkType(Constants\Setting::BLOCK_SOLD_LOTS, self::ERR_BLOCK_SOLD_LOTS_INVALID);
        $this->checkType(Constants\Setting::BUY_NOW_RESTRICTION, self::ERR_BUY_NOW_RESTRICTION_INVALID);
        $this->checkType(Constants\Setting::BUY_NOW_UNSOLD, self::ERR_BUY_NOW_UNSOLD_INVALID);
        $this->checkType(Constants\Setting::CASH_DISCOUNT, self::ERR_CASH_DISCOUNT_INVALID);
        $this->checkType(Constants\Setting::CATEGORY_IN_INVOICE, self::ERR_CATEGORY_IN_INVOICE_INVALID);
        $this->checkType(Constants\Setting::CC_PAYMENT, self::ERR_CC_PAYMENT_INVALID);
        $this->checkType(Constants\Setting::CC_PAYMENT_EWAY, self::ERR_CC_PAYMENT_EWAY_INVALID);
        $this->checkType(Constants\Setting::CC_PAYMENT_NMI, self::ERR_CC_PAYMENT_NMI_INVALID);
        $this->checkType(Constants\Setting::CC_PAYMENT_PAY_TRACE, self::ERR_CC_PAYMENT_PAY_TRACE_INVALID);
        $this->checkType(Constants\Setting::CC_PAYMENT_OPAYO, self::ERR_CC_PAYMENT_OPAYO_INVALID);
        $this->checkType(Constants\Setting::CHARGE_CONSIGNOR_COMMISSION, self::ERR_CHARGE_CONSIGNOR_COMMISSION_INVALID);
        $this->checkType(Constants\Setting::CLEAR_MESSAGE_CENTER, self::ERR_CLEAR_MESSAGE_CENTER_INVALID);
        $this->checkType(Constants\Setting::CLEAR_MESSAGE_CENTER_LOG, self::ERR_CLEAR_MESSAGE_CENTER_LOG_INVALID);
        $this->checkType(Constants\Setting::CONDITIONAL_SALES, self::ERR_CONDITIONAL_SALES_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_ADDRESS_SALE, self::ERR_CONFIRM_ADDRESS_SALE_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_MULTIBIDS, self::ERR_CONFIRM_MULTIBIDS_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_MULTIBIDS_TEXT, self::ERR_CONFIRM_MULTIBIDS_TEXT_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_TERMS_AND_CONDITIONS_SALE, self::ERR_CONFIRM_TERMS_AND_CONDITIONS_SALE_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_TIMED_BID, self::ERR_CONFIRM_TIMED_BID_INVALID);
        $this->checkType(Constants\Setting::CONFIRM_TIMED_BID_TEXT, self::ERR_CONFIRM_TIMED_BID_TEXT_INVALID);
        $this->checkType(Constants\Setting::CONSIGNOR_SCHEDULE_HEADER, self::ERR_CONSIGNOR_SCHEDULE_HEADER_INVALID);
        $this->checkType(
            Constants\Setting::CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_ALL_CATEGORIES,
            self::ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_ALL_CATEGORIES_INVALID
        );
        $this->checkType(
            Constants\Setting::CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_NO_CATEGORY_LOT,
            self::ERR_CUSTOM_TEMPLATE_HIDE_EMPTY_FIELDS_FOR_NO_CATEGORY_LOT_INVALID
        );
        $this->checkType(Constants\Setting::DEFAULT_COUNTRY, self::ERR_DEFAULT_COUNTRY_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_COUNTRY_CODE, self::ERR_DEFAULT_COUNTRY_CODE_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_EXPORT_ENCODING, self::ERR_DEFAULT_EXPORT_ENCODING_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_IMAGE_PREVIEW, self::ERR_DEFAULT_IMAGE_PREVIEW_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_IMPORT_ENCODING, self::ERR_DEFAULT_IMPORT_ENCODING_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_INVOICE_NOTES, self::ERR_DEFAULT_INVOICE_NOTES_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_LOT_ITEM_NO_TAX_OOS, self::ERR_DEFAULT_LOT_ITEM_NO_TAX_OOS_INVALID);
        $this->checkType(Constants\Setting::DEFAULT_POST_AUC_IMPORT_PREMIUM, self::ERR_DEFAULT_POST_AUC_IMPORT_PREMIUM_INVALID);
        $this->checkType(Constants\Setting::DELAY_AFTER_BID_ACCEPTED, self::ERR_DELAY_AFTER_BID_ACCEPTED_INVALID);
        $this->checkType(Constants\Setting::DELAY_BLOCK_SELL, self::ERR_DELAY_BLOCK_SELL_INVALID);
        $this->checkType(Constants\Setting::DELAY_SOLD_ITEM, self::ERR_DELAY_SOLD_ITEM_INVALID);
        $this->checkType(Constants\Setting::DISPLAY_BIDDER_INFO, self::ERR_DISPLAY_BIDDER_INFO_INVALID);
        $this->checkType(Constants\Setting::DISPLAY_ITEM_NUM, self::ERR_DISPLAY_ITEM_NUM_INVALID);
        $this->checkType(Constants\Setting::DISPLAY_QUANTITY, self::ERR_DISPLAY_QUANTITY_INVALID);
        $this->checkType(Constants\Setting::DONT_MAKE_USER_BIDDER, self::ERR_DONT_MAKE_USER_BIDDER_INVALID);
        $this->checkType(Constants\Setting::EMAIL_FORMAT, self::ERR_EMAIL_FORMAT_INVALID);
        $this->checkType(Constants\Setting::ENABLE_CONSIGNOR_COMPANY_CLERKING, self::ERR_ENABLE_CONSIGNOR_COMPANY_CLERKING_INVALID);
        $this->checkType(Constants\Setting::ENABLE_CONSIGNOR_PAYMENT_INFO, self::ERR_ENABLE_CONSIGNOR_PAYMENT_INFO_INVALID);
        $this->checkType(Constants\Setting::ENABLE_PAYPAL_PAYMENTS, self::ERR_ENABLE_PAYPAL_PAYMENTS_INVALID);
        $this->checkType(Constants\Setting::ENABLE_RESELLER_REG, self::ERR_ENABLE_RESELLER_REG_INVALID);
        $this->checkType(Constants\Setting::ENABLE_SECOND_CHANCE, self::ERR_ENABLE_SECOND_CHANCE_INVALID);
        $this->checkType(Constants\Setting::ENABLE_SMART_PAYMENTS, self::ERR_ENABLE_SMART_PAYMENTS_INVALID);
        $this->checkType(Constants\Setting::ENABLE_USER_COMPANY, self::ERR_ENABLE_USER_COMPANY_INVALID);
        $this->checkType(Constants\Setting::ENABLE_USER_RESUME, self::ERR_ENABLE_USER_RESUME_INVALID);
        $this->checkType(Constants\Setting::EWAY_ACCOUNT_TYPE, self::ERR_EWAY_ACCOUNT_TYPE_INVALID);
        $this->checkType(Constants\Setting::EWAY_API_KEY, self::ERR_EWAY_API_KEY_INVALID);
        $this->checkType(Constants\Setting::EWAY_ENCRYPTION_KEY, self::ERR_EWAY_ENCRYPTION_KEY_INVALID);
        $this->checkType(Constants\Setting::EWAY_PASSWORD, self::ERR_EWAY_PASSWORD_INVALID);
        $this->checkType(Constants\Setting::EXTEND_TIME_HYBRID, self::ERR_EXTEND_TIME_HYBRID_INVALID);
        $this->checkType(Constants\Setting::EXTEND_TIME_TIMED, self::ERR_EXTEND_TIME_TIMED_INVALID);
        $this->checkType(Constants\Setting::EXTERNAL_JAVASCRIPT, self::ERR_EXTERNAL_JAVASCRIPT_INVALID);
        $this->checkType(Constants\Setting::FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT, self::ERR_FAILED_LOGIN_ATTEMPT_LOCKOUT_TIMEOUT_INVALID);
        $this->checkType(Constants\Setting::FAILED_LOGIN_ATTEMPT_TIME_INCREMENT, self::ERR_FAILED_LOGIN_ATTEMPT_TIME_INCREMENT_INVALID);
        $this->checkType(Constants\Setting::FAIR_WARNING_SOUND, self::ERR_FAIR_WARNING_SOUND_INVALID);
        $this->checkType(Constants\Setting::FAIR_WARNINGS_HYBRID, self::ERR_FAIR_WARNINGS_HYBRID_INVALID);
        $this->checkType(Constants\Setting::FLOOR_BIDDERS_FROM_DROPDOWN, self::ERR_FLOOR_BIDDERS_FROM_DROPDOWN_INVALID);
        $this->checkType(Constants\Setting::FORCE_MAIN_ACCOUNT_DOMAIN_MODE, self::ERR_FORCE_MAIN_ACCOUNT_DOMAIN_MODE_INVALID);
        $this->checkType(Constants\Setting::GA_BID_TRACKING, self::ERR_GA_BID_TRACKING_INVALID);
        $this->checkType(Constants\Setting::HAMMER_PRICE_BP, self::ERR_HAMMER_PRICE_BP_INVALID);
        $this->checkType(Constants\Setting::HIDE_BIDDER_NUMBER, self::ERR_HIDE_BIDDER_NUMBER_INVALID);
        $this->checkType(Constants\Setting::HIDE_COUNTRY_CODE_SELECTION, self::ERR_HIDE_COUNTRY_CODE_SELECTION_INVALID);
        $this->checkType(Constants\Setting::HIDE_MOVETOSALE, self::ERR_HIDE_MOVETOSALE_INVALID);
        $this->checkType(Constants\Setting::HIDE_UNSOLD_LOTS, self::ERR_HIDE_UNSOLD_LOTS_INVALID);
        $this->checkType(Constants\Setting::IMAGE_AUTO_ORIENT, self::ERR_IMAGE_AUTO_ORIENT_INVALID);
        $this->checkType(Constants\Setting::IMAGE_OPTIMIZE, self::ERR_IMAGE_OPTIMIZE_INVALID);
        $this->checkType(Constants\Setting::INCLUDE_ACH_INFO, self::ERR_INCLUDE_ACH_INFO_INVALID);
        $this->checkType(Constants\Setting::INCLUDE_BASIC_INFO, self::ERR_INCLUDE_BASIC_INFO_INVALID);
        $this->checkType(Constants\Setting::INCLUDE_BILLING_INFO, self::ERR_INCLUDE_BILLING_INFO_INVALID);
        $this->checkType(Constants\Setting::INCLUDE_CC_INFO, self::ERR_INCLUDE_CC_INFO_INVALID);
        $this->checkType(Constants\Setting::INCLUDE_USER_PREFERENCES, self::ERR_INCLUDE_USER_PREFERENCES_INVALID);
        $this->checkType(Constants\Setting::INLINE_BID_CONFIRM, self::ERR_INLINE_BID_CONFIRM_INVALID);
        $this->checkType(Constants\Setting::INVOICE_IDENTIFICATION, self::ERR_INVOICE_IDENTIFICATION_INVALID);
        $this->checkType(Constants\Setting::INVOICE_ITEM_DESCRIPTION, self::ERR_INVOICE_ITEM_DESCRIPTION_INVALID);
        $this->checkType(Constants\Setting::INVOICE_ITEM_SALES_TAX, self::ERR_INVOICE_ITEM_SALES_TAX_INVALID);
        $this->checkType(Constants\Setting::INVOICE_ITEM_SALES_TAX_APPLICATION, self::ERR_INVOICE_ITEM_SALES_TAX_APPLICATION_INVALID);
        $this->checkType(Constants\Setting::INVOICE_ITEM_SEPARATE_TAX, self::ERR_INVOICE_ITEM_SEPARATE_TAX_INVALID);
        $this->checkType(Constants\Setting::INVOICE_LOGO, self::ERR_INVOICE_LOGO_INVALID);
        $this->checkType(Constants\Setting::INVOICE_TAX_DESIGNATION_STRATEGY, self::ERR_INVOICE_TAX_DESIGNATION_STRATEGY_INVALID);
        $this->checkType(Constants\Setting::ITEM_NUM_LOCK, self::ERR_ITEM_NUM_LOCK_INVALID);
        $this->checkType(Constants\Setting::ITEMS_PER_PAGE, self::ERR_ITEMS_PER_PAGE_INVALID);
        $this->checkType(Constants\Setting::KEEP_DECIMAL_INVOICE, self::ERR_KEEP_DECIMAL_INVOICE_INVALID);
        $this->checkType(Constants\Setting::LANDING_PAGE, self::ERR_LANDING_PAGE_INVALID);
        $this->checkType(Constants\Setting::LANDING_PAGE_URL, self::ERR_LANDING_PAGE_URL_INVALID);
        $this->checkType(Constants\Setting::LIVE_BIDDING_COUNTDOWN, self::ERR_LIVE_BIDDING_COUNTDOWN_INVALID);
        $this->checkType(Constants\Setting::LIVE_CHAT, self::ERR_LIVE_CHAT_INVALID);
        $this->checkType(Constants\Setting::LIVE_CHAT_VIEW_ALL, self::ERR_LIVE_CHAT_VIEW_ALL_INVALID);
        $this->checkType(Constants\Setting::LIVE_VIEW_ACCESS, self::ERR_LIVE_VIEW_ACCESS_INVALID);
        $this->checkType(Constants\Setting::LOGIN_DESC, self::ERR_LOGIN_DESC_INVALID);
        $this->checkType(Constants\Setting::LOGIN_KEYWORD, self::ERR_LOGIN_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::LOGIN_TITLE, self::ERR_LOGIN_TITLE_INVALID);
        $this->checkType(Constants\Setting::LOGO_LINK, self::ERR_LOGO_LINK_INVALID);
        $this->checkType(Constants\Setting::LOT_BIDDING_HISTORY_ACCESS, self::ERR_LOT_BIDDING_HISTORY_ACCESS_INVALID);
        $this->checkType(Constants\Setting::LOT_BIDDING_INFO_ACCESS, self::ERR_LOT_BIDDING_INFO_ACCESS_INVALID);
        $this->checkType(Constants\Setting::LOT_CATEGORY_GLOBAL_ORDER_AVAILABLE, self::ERR_LOT_CATEGORY_GLOBAL_ORDER_AVAILABLE_INVALID);
        $this->checkType(Constants\Setting::LOT_DETAILS_ACCESS, self::ERR_LOT_DETAILS_ACCESS_INVALID);
        $this->checkType(Constants\Setting::LOT_ITEM_DETAIL_TEMPLATE, self::ERR_LOT_ITEM_DETAIL_TEMPLATE_INVALID);
        $this->checkType(
            Constants\Setting::LOT_ITEM_DETAIL_TEMPLATE_FOR_NO_CATEGORY,
            self::ERR_LOT_ITEM_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID
        );
        $this->checkType(Constants\Setting::LOT_PAGE_DESC, self::ERR_LOT_PAGE_DESC_INVALID);
        $this->checkType(Constants\Setting::LOT_PAGE_KEYWORD, self::ERR_LOT_PAGE_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::LOT_PAGE_TITLE, self::ERR_LOT_PAGE_TITLE_INVALID);
        $this->checkType(Constants\Setting::LOT_SEO_URL_TEMPLATE, self::ERR_LOT_SEO_URL_TEMPLATE_INVALID);
        $this->checkType(Constants\Setting::LOT_START_GAP_TIME_HYBRID, self::ERR_LOT_START_GAP_TIME_HYBRID_INVALID);
        $this->checkType(Constants\Setting::LOT_STARTING_BID_ACCESS, self::ERR_LOT_STARTING_BID_ACCESS_INVALID);
        $this->checkType(Constants\Setting::LOT_STATUS, self::ERR_LOT_STATUS_INVALID);
        $this->checkType(Constants\Setting::LOT_WINNING_BID_ACCESS, self::ERR_LOT_WINNING_BID_ACCESS_INVALID);
        $this->checkType(Constants\Setting::MAIN_MENU_AUCTION_TARGET, self::ERR_MAIN_MENU_AUCTION_TARGET_INVALID);
        $this->checkType(Constants\Setting::MAKE_PERMANENT_BIDDER_NUM, self::ERR_MAKE_PERMANENT_BIDDER_NUM_INVALID);
        $this->checkType(Constants\Setting::MANDATORY_ACH_INFO, self::ERR_MANDATORY_ACH_INFO_INVALID);
        $this->checkType(Constants\Setting::MANDATORY_BASIC_INFO, self::ERR_MANDATORY_BASIC_INFO_INVALID);
        $this->checkType(Constants\Setting::MANDATORY_BILLING_INFO, self::ERR_MANDATORY_BILLING_INFO_INVALID);
        $this->checkType(Constants\Setting::MANDATORY_CC_INFO, self::ERR_MANDATORY_CC_INFO_INVALID);
        $this->checkType(Constants\Setting::MANDATORY_USER_PREFERENCES, self::ERR_MANDATORY_USER_PREFERENCES_INVALID);
        $this->checkType(Constants\Setting::MAX_STORED_SEARCHES, self::ERR_MAX_STORED_SEARCHES_INVALID);
        $this->checkType(Constants\Setting::MULTI_CURRENCY, self::ERR_MULTI_CURRENCY_INVALID);
        $this->checkType(Constants\Setting::MULTIPLE_SALE_INVOICE, self::ERR_MULTIPLE_SALE_INVOICE_INVALID);
        $this->checkType(Constants\Setting::MULTIPLE_SALE_SETTLEMENT, self::ERR_MULTIPLE_SALE_SETTLEMENT_INVALID);
        $this->checkType(Constants\Setting::NEWSLETTER_OPTION, self::ERR_NEWSLETTER_OPTION_INVALID);
        $this->checkType(Constants\Setting::NEXT_BID_BUTTON, self::ERR_NEXT_BID_BUTTON_INVALID);
        $this->checkType(Constants\Setting::NMI_MODE, self::ERR_NMI_MODE_INVALID);
        $this->checkType(Constants\Setting::NMI_PASSWORD, self::ERR_NMI_PASSWORD_INVALID);
        $this->checkType(Constants\Setting::NMI_USERNAME, self::ERR_NMI_USERNAME_INVALID);
        $this->checkType(Constants\Setting::NMI_VAULT, self::ERR_NMI_VAULT_INVALID);
        $this->checkType(Constants\Setting::NMI_VAULT_OPTION, self::ERR_NMI_VAULT_OPTION_INVALID);
        $this->checkType(Constants\Setting::NO_AUTO_AUTHORIZATION, self::ERR_NO_AUTO_AUTHORIZATION_INVALID);
        $this->checkType(Constants\Setting::NO_LOWER_MAXBID, self::ERR_NO_LOWER_MAXBID_INVALID);
        $this->checkType(Constants\Setting::NOTIFY_ABSENTEE_BIDDERS, self::ERR_NOTIFY_ABSENTEE_BIDDERS_INVALID);
        $this->checkType(Constants\Setting::ON_AUCTION_REGISTRATION, self::ERR_ON_AUCTION_REGISTRATION_INVALID);
        $this->checkType(Constants\Setting::ON_AUCTION_REGISTRATION_AMOUNT, self::ERR_ON_AUCTION_REGISTRATION_AMOUNT_INVALID);
        $this->checkType(Constants\Setting::ON_AUCTION_REGISTRATION_AUTO, self::ERR_ON_AUCTION_REGISTRATION_AUTO_INVALID);
        $this->checkType(Constants\Setting::ON_AUCTION_REGISTRATION_EXPIRES, self::ERR_ON_AUCTION_REGISTRATION_EXPIRES_INVALID);
        $this->checkType(Constants\Setting::ON_REGISTRATION, self::ERR_ON_REGISTRATION_INVALID);
        $this->checkType(Constants\Setting::ON_REGISTRATION_AMOUNT, self::ERR_ON_REGISTRATION_AMOUNT_INVALID);
        $this->checkType(Constants\Setting::ON_REGISTRATION_EXPIRES, self::ERR_ON_REGISTRATION_EXPIRES_INVALID);
        $this->checkType(Constants\Setting::ONE_SALE_GROUPED_INVOICE, self::ERR_ONE_SALE_GROUPED_INVOICE_INVALID);
        $this->checkType(Constants\Setting::ONLINE_BID_INCOMING_ON_ADMIN_SOUND, self::ERR_ONLINE_BID_INCOMING_ON_ADMIN_SOUND_INVALID);
        $this->checkType(Constants\Setting::ONLINEBID_BUTTON_INFO, self::ERR_ONLINEBID_BUTTON_INFO_INVALID);
        $this->checkType(Constants\Setting::ONLY_ONE_REG_EMAIL, self::ERR_ONLY_ONE_REG_EMAIL_INVALID);
        $this->checkType(Constants\Setting::OUT_BID_SOUND, self::ERR_OUT_BID_SOUND_INVALID);
        $this->checkType(Constants\Setting::PAGE_HEADER, self::ERR_PAGE_HEADER_INVALID);
        $this->checkType(Constants\Setting::PAGE_HEADER_TYPE, self::ERR_PAGE_HEADER_TYPE_INVALID);
        $this->checkType(Constants\Setting::PAGE_REDIRECTION, self::ERR_PAGE_REDIRECTION_INVALID);
        $this->checkType(Constants\Setting::PASSED_SOUND, self::ERR_PASSED_SOUND_INVALID);
        $this->checkType(Constants\Setting::PAY_TRACE_CIM, self::ERR_PAY_TRACE_CIM_INVALID);
        $this->checkType(Constants\Setting::PAY_TRACE_MODE, self::ERR_PAY_TRACE_MODE_INVALID);
        $this->checkType(Constants\Setting::PAY_TRACE_PASSWORD, self::ERR_PAY_TRACE_PASSWORD_INVALID);
        $this->checkType(Constants\Setting::PAY_TRACE_USERNAME, self::ERR_PAY_TRACE_USERNAME_INVALID);
        $this->checkType(Constants\Setting::PAYMENT_REMINDER_EMAIL_FREQUENCY, self::ERR_PAYMENT_REMINDER_EMAIL_FREQUENCY_INVALID);
        $this->checkType(Constants\Setting::PAYMENT_TRACKING_CODE, self::ERR_PAYMENT_TRACKING_CODE_INVALID);
        $this->checkType(Constants\Setting::PAYPAL_ACCOUNT_TYPE, self::ERR_PAYPAL_ACCOUNT_TYPE_INVALID);
        $this->checkType(Constants\Setting::PAYPAL_BN_CODE, self::ERR_PAYPAL_BN_CODE_INVALID);
        $this->checkType(Constants\Setting::PAYPAL_EMAIL, self::ERR_PAYPAL_EMAIL_INVALID);
        $this->checkType(Constants\Setting::PAYPAL_IDENTITY_TOKEN, self::ERR_PAYPAL_IDENTITY_TOKEN_INVALID);
        $this->checkType(Constants\Setting::PENDING_ACTION_TIMEOUT_HYBRID, self::ERR_PENDING_ACTION_TIMEOUT_HYBRID_INVALID);
        $this->checkType(Constants\Setting::PICKUP_REMINDER_EMAIL_FREQUENCY, self::ERR_PICKUP_REMINDER_EMAIL_FREQUENCY_INVALID);
        $this->checkType(Constants\Setting::PLACE_BID_REQUIRE_CC, self::ERR_PLACE_BID_REQUIRE_CC_INVALID);
        $this->checkType(Constants\Setting::PLACE_BID_SOUND, self::ERR_PLACE_BID_SOUND_INVALID);
        $this->checkType(Constants\Setting::PRIMARY_CURRENCY_ID, self::ERR_PRIMARY_CURRENCY_ID_INVALID);
        $this->checkType(Constants\Setting::PROCESSING_CHARGE, self::ERR_PROCESSING_CHARGE_INVALID);
        $this->checkType(Constants\Setting::PROFILE_BILLING_OPTIONAL, self::ERR_PROFILE_BILLING_OPTIONAL_INVALID);
        $this->checkType(Constants\Setting::PROFILE_SHIPPING_OPTIONAL, self::ERR_PROFILE_SHIPPING_OPTIONAL_INVALID);
        $this->checkType(Constants\Setting::PW_HISTORY_REPEAT, self::ERR_PW_HISTORY_REPEAT_INVALID);
        $this->checkType(Constants\Setting::PW_MAX_CONSEQ_LETTER, self::ERR_PW_MAX_CONSEQ_LETTER_INVALID);
        $this->checkType(Constants\Setting::PW_MAX_CONSEQ_NUM, self::ERR_PW_MAX_CONSEQ_NUM_INVALID);
        $this->checkType(Constants\Setting::PW_MAX_SEQ_LETTER, self::ERR_PW_MAX_SEQ_LETTER_INVALID);
        $this->checkType(Constants\Setting::PW_MAX_SEQ_NUM, self::ERR_PW_MAX_SEQ_NUM_INVALID);
        $this->checkType(Constants\Setting::PW_MIN_LEN, self::ERR_PW_MIN_LEN_INVALID);
        $this->checkType(Constants\Setting::PW_MIN_LETTER, self::ERR_PW_MIN_LETTER_INVALID);
        $this->checkType(Constants\Setting::PW_MIN_NUM, self::ERR_PW_MIN_NUM_INVALID);
        $this->checkType(Constants\Setting::PW_MIN_SPECIAL, self::ERR_PW_MIN_SPECIAL_INVALID);
        $this->checkType(Constants\Setting::PW_RENEW, self::ERR_PW_RENEW_INVALID);
        $this->checkType(Constants\Setting::PW_REQ_MIXED_CASE, self::ERR_PW_REQ_MIXED_CASE_INVALID);
        $this->checkType(Constants\Setting::PW_TMP_TIMEOUT, self::ERR_PW_TMP_TIMEOUT_INVALID);
        $this->checkType(Constants\Setting::QUANTITY_IN_INVOICE, self::ERR_QUANTITY_IN_INVOICE_INVALID);
        $this->checkType(Constants\Setting::QUANTITY_IN_SETTLEMENT, self::ERR_QUANTITY_IN_SETTLEMENT_INVALID);
        $this->checkType(Constants\Setting::REG_CONFIRM_AUTO_APPROVE, self::ERR_REG_CONFIRM_AUTO_APPROVE_INVALID);
        $this->checkType(Constants\Setting::REG_CONFIRM_PAGE, self::ERR_REG_CONFIRM_PAGE_INVALID);
        $this->checkType(Constants\Setting::REG_CONFIRM_PAGE_CONTENT, self::ERR_REG_CONFIRM_PAGE_CONTENT_INVALID);
        $this->checkType(Constants\Setting::REG_REMINDER_EMAIL, self::ERR_REG_REMINDER_EMAIL_INVALID);
        $this->checkType(Constants\Setting::REG_USE_HIGH_BIDDER, self::ERR_REG_USE_HIGH_BIDDER_INVALID);
        $this->checkType(Constants\Setting::REGISTRATION_REQUIRE_CC, self::ERR_REGISTRATION_REQUIRE_CC_INVALID);
        $this->checkType(Constants\Setting::REQUIRE_IDENTIFICATION, self::ERR_REQUIRE_IDENTIFICATION_INVALID);
        $this->checkType(Constants\Setting::REQUIRE_ON_INC_BIDS, self::ERR_REQUIRE_ON_INC_BIDS_INVALID);
        $this->checkType(Constants\Setting::REQUIRE_REENTER_CC, self::ERR_REQUIRE_REENTER_CC_INVALID);
        $this->checkType(Constants\Setting::RESERVE_MET_NOTICE, self::ERR_RESERVE_MET_NOTICE_INVALID);
        $this->checkType(Constants\Setting::RESERVE_NOT_MET_NOTICE, self::ERR_RESERVE_NOT_MET_NOTICE_INVALID);
        $this->checkType(Constants\Setting::RESET_TIMER_ON_UNDO_HYBRID, self::ERR_RESET_TIMER_ON_UNDO_HYBRID_INVALID);
        $this->checkType(Constants\Setting::RESPONSIVE_CSS_FILE, self::ERR_RESPONSIVE_CSS_FILE_INVALID);
        $this->checkType(Constants\Setting::RESPONSIVE_HEADER_ADDRESS, self::ERR_RESPONSIVE_HEADER_ADDRESS_INVALID);
        $this->checkType(Constants\Setting::RESPONSIVE_HTML_HEAD_CODE, self::ERR_RESPONSIVE_HTML_HEAD_CODE_INVALID);
        $this->checkType(Constants\Setting::REVOKE_PREFERRED_BIDDER, self::ERR_REVOKE_PREFERRED_BIDDER_INVALID);
        $this->checkType(Constants\Setting::RTB_DETAIL_TEMPLATE, self::ERR_RTB_DETAIL_TEMPLATE_INVALID);
        $this->checkType(Constants\Setting::RTB_DETAIL_TEMPLATE_FOR_NO_CATEGORY, self::ERR_RTB_DETAIL_TEMPLATE_FOR_NO_CATEGORY_INVALID);
        $this->checkType(Constants\Setting::OPAYO_3DSECURE, self::ERR_OPAYO_3DSECURE_INVALID);
        $this->checkType(Constants\Setting::OPAYO_AVSCV2, self::ERR_OPAYO_AVSCV2_INVALID);
        $this->checkType(Constants\Setting::OPAYO_CURRENCY, self::ERR_OPAYO_CURRENCY_INVALID);
        $this->checkType(Constants\Setting::OPAYO_MODE, self::ERR_OPAYO_MODE_INVALID);
        $this->checkType(Constants\Setting::OPAYO_SEND_EMAIL, self::ERR_OPAYO_SEND_EMAIL_INVALID);
        $this->checkType(Constants\Setting::OPAYO_TOKEN, self::ERR_OPAYO_TOKEN_INVALID);
        $this->checkType(Constants\Setting::OPAYO_VENDOR_NAME, self::ERR_OPAYO_VENDOR_NAME_INVALID);
        $this->checkType(Constants\Setting::SALES_TAX, self::ERR_SALES_TAX_INVALID);
        $this->checkType(Constants\Setting::SALES_TAX_SERVICES, self::ERR_SALES_TAX_SERVICES_INVALID);
        $this->checkType(Constants\Setting::SAM_TAX, self::ERR_SAM_TAX_INVALID);
        $this->checkType(Constants\Setting::SAM_TAX_DEFAULT_COUNTRY, self::ERR_SAM_TAX_DEFAULT_COUNTRY_INVALID);
        $this->checkType(Constants\Setting::SAVE_RESELLER_CERT_IN_PROFILE, self::ERR_SAVE_RESELLER_CERT_IN_PROFILE_INVALID);
        $this->checkType(Constants\Setting::SEARCH_RESULTS_FORMAT, self::ERR_SEARCH_RESULTS_FORMAT_INVALID);
        $this->checkType(Constants\Setting::SEARCH_RESULTS_PAGE_DESC, self::ERR_SEARCH_RESULTS_PAGE_DESC_INVALID);
        $this->checkType(Constants\Setting::SEARCH_RESULTS_PAGE_KEYWORD, self::ERR_SEARCH_RESULTS_PAGE_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::SEARCH_RESULTS_PAGE_TITLE, self::ERR_SEARCH_RESULTS_PAGE_TITLE_INVALID);
        $this->checkType(Constants\Setting::SEND_CONFIRMATION_LINK, self::ERR_SEND_CONFIRMATION_LINK_INVALID);
        $this->checkType(Constants\Setting::SEND_RESULTS_ONCE, self::ERR_SEND_RESULTS_ONCE_INVALID);
        $this->checkType(Constants\Setting::SETTLEMENT_LOGO, self::ERR_SETTLEMENT_LOGO_INVALID);
        $this->checkType(Constants\Setting::SETTLEMENT_UNPAID_LOTS, self::ERR_SETTLEMENT_UNPAID_LOTS_INVALID);
        $this->checkType(Constants\Setting::SHARE_USER_INFO, self::ERR_SHARE_USER_INFO_INVALID);
        $this->checkType(Constants\Setting::SHARE_USER_STATS, self::ERR_SHARE_USER_STATS_INVALID);
        $this->checkType(Constants\Setting::SHIPPING_CHARGE, self::ERR_SHIPPING_CHARGE_INVALID);
        $this->checkType(Constants\Setting::SHIPPING_INFO_BOX, self::ERR_SHIPPING_INFO_BOX_INVALID);
        $this->checkType(Constants\Setting::SHOW_AUCTION_STARTS_ENDING, self::ERR_SHOW_AUCTION_STARTS_ENDING_INVALID);
        $this->checkType(Constants\Setting::SHOW_COUNTDOWN_SECONDS, self::ERR_SHOW_COUNTDOWN_SECONDS_INVALID);
        $this->checkType(Constants\Setting::SHOW_HIGH_EST, self::ERR_SHOW_HIGH_EST_INVALID);
        $this->checkType(Constants\Setting::SHOW_LOW_EST, self::ERR_SHOW_LOW_EST_INVALID);
        $this->checkType(Constants\Setting::SHOW_MEMBER_MENU_ITEMS, self::ERR_SHOW_MEMBER_MENU_ITEMS_INVALID);
        $this->checkType(Constants\Setting::SHOW_PORT_NOTICE, self::ERR_SHOW_PORT_NOTICE_INVALID);
        $this->checkType(Constants\Setting::SHOW_USER_RESUME, self::ERR_SHOW_USER_RESUME_INVALID);
        $this->checkType(Constants\Setting::SHOW_WINNER_IN_CATALOG, self::ERR_SHOW_WINNER_IN_CATALOG_INVALID);
        $this->checkType(Constants\Setting::SIGNUP_DESC, self::ERR_SIGNUP_DESC_INVALID);
        $this->checkType(Constants\Setting::SIGNUP_KEYWORD, self::ERR_SIGNUP_KEYWORD_INVALID);
        $this->checkType(Constants\Setting::SIGNUP_TITLE, self::ERR_SIGNUP_TITLE_INVALID);
        $this->checkType(Constants\Setting::SIGNUP_TRACKING_CODE, self::ERR_SIGNUP_TRACKING_CODE_INVALID);
        $this->checkType(Constants\Setting::SIMPLIFIED_SIGNUP, self::ERR_SIMPLIFIED_SIGNUP_INVALID);
        $this->checkType(Constants\Setting::SLIDESHOW_PROJECTOR_ONLY, self::ERR_SLIDESHOW_PROJECTOR_ONLY_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_ACCOUNT_TYPE, self::ERR_SMART_PAY_ACCOUNT_TYPE_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_MERCHANT_ACCOUNT, self::ERR_SMART_PAY_MERCHANT_ACCOUNT_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_MERCHANT_MODE, self::ERR_SMART_PAY_MERCHANT_MODE_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_MODE, self::ERR_SMART_PAY_MODE_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_SHARED_SECRET, self::ERR_SMART_PAY_SHARED_SECRET_INVALID);
        $this->checkType(Constants\Setting::SMART_PAY_SKIN_CODE, self::ERR_SMART_PAY_SKIN_CODE_INVALID);
        $this->checkType(Constants\Setting::SMTP_AUTH, self::ERR_SMTP_AUTH_INVALID);
        $this->checkType(Constants\Setting::SMTP_PASSWORD, self::ERR_SMTP_PASSWORD_INVALID);
        $this->checkType(Constants\Setting::SMTP_PORT, self::ERR_SMTP_PORT_INVALID);
        $this->checkType(Constants\Setting::SMTP_SERVER, self::ERR_SMTP_SERVER_INVALID);
        $this->checkType(Constants\Setting::SMTP_SSL_TYPE, self::ERR_SMTP_SSL_TYPE_INVALID);
        $this->checkType(Constants\Setting::SMTP_USERNAME, self::ERR_SMTP_USERNAME_INVALID);
        $this->checkType(Constants\Setting::SOLD_NOT_WON_SOUND, self::ERR_SOLD_NOT_WON_SOUND_INVALID);
        $this->checkType(Constants\Setting::SOLD_WON_SOUND, self::ERR_SOLD_WON_SOUND_INVALID);
        $this->checkType(Constants\Setting::STAY_ON_ACCOUNT_DOMAIN, self::ERR_STAY_ON_ACCOUNT_DOMAIN_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_ENABLED, self::ERR_STLM_CHECK_ENABLED_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_AMOUNT_COORD_X, self::ERR_STLM_CHECK_AMOUNT_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_AMOUNT_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_X, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_AMOUNT_SPELLING_COORD_Y, self::ERR_STLM_CHECK_AMOUNT_SPELLING_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_DATE_COORD_X, self::ERR_STLM_CHECK_DATE_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_DATE_COORD_Y, self::ERR_STLM_CHECK_DATE_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_MEMO_COORD_X, self::ERR_STLM_CHECK_MEMO_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_MEMO_COORD_Y, self::ERR_STLM_CHECK_MEMO_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_ADDRESS_COORD_X, self::ERR_STLM_CHECK_ADDRESS_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_ADDRESS_COORD_Y, self::ERR_STLM_CHECK_ADDRESS_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_FILE, self::ERR_STLM_CHECK_FILE_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_NAME_COORD_X, self::ERR_STLM_CHECK_NAME_COORD_X_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_NAME_COORD_Y, self::ERR_STLM_CHECK_NAME_COORD_Y_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_HEIGHT, self::ERR_STLM_CHECK_HEIGHT_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_PER_PAGE, self::ERR_STLM_CHECK_PER_PAGE_INVALID);
        $this->checkType(Constants\Setting::STLM_CHECK_REPEAT_COUNT, self::ERR_STLM_CHECK_REPEAT_COUNT_INVALID);
        $this->checkType(Constants\Setting::SUGGESTED_STARTING_BID, self::ERR_SUGGESTED_STARTING_BID_INVALID);
        $this->checkType(Constants\Setting::SUPPORT_EMAIL, self::ERR_SUPPORT_EMAIL_INVALID);
        $this->checkType(Constants\Setting::SWITCH_FRAME_SECONDS, self::ERR_SWITCH_FRAME_SECONDS_INVALID);
        $this->checkType(Constants\Setting::TAKE_MAX_BIDS_UNDER_RESERVE, self::ERR_TAKE_MAX_BIDS_UNDER_RESERVE_INVALID);
        $this->checkType(Constants\Setting::TELL_A_FRIEND, self::ERR_TELL_A_FRIEND_INVALID);
        $this->checkType(Constants\Setting::TEXT_MSG_API_NOTIFICATION, self::ERR_TEXT_MSG_API_NOTIFICATION_INVALID);
        $this->checkType(Constants\Setting::TEXT_MSG_API_OUTBID_NOTIFICATION, self::ERR_TEXT_MSG_API_OUTBID_NOTIFICATION_INVALID);
        $this->checkType(Constants\Setting::TEXT_MSG_API_POST_VAR, self::ERR_TEXT_MSG_API_POST_VAR_INVALID);
        $this->checkType(Constants\Setting::TEXT_MSG_API_URL, self::ERR_TEXT_MSG_API_URL_INVALID);
        $this->checkType(Constants\Setting::TEXT_MSG_ENABLED, self::ERR_TEXT_MSG_ENABLED_INVALID);
        $this->checkType(Constants\Setting::TIMED_ABOVE_RESERVE, self::ERR_TIMED_ABOVE_RESERVE_INVALID);
        $this->checkType(Constants\Setting::TIMED_ABOVE_STARTING_BID, self::ERR_TIMED_ABOVE_STARTING_BID_INVALID);
        $this->checkType(Constants\Setting::TWENTY_MESSAGES_MAX, self::ERR_TWENTY_MESSAGES_MAX_INVALID);
        $this->checkType(Constants\Setting::QUANTITY_DIGITS, self::ERR_QUANTITY_DIGITS_INVALID);
        $this->checkType(Constants\Setting::US_NUMBER_FORMATTING, self::ERR_US_NUMBER_FORMATTING_INVALID);
        $this->checkType(Constants\Setting::USE_ALTERNATE_PDF_CATALOG, self::ERR_USE_ALTERNATE_PDF_CATALOG_INVALID);
        $this->checkType(Constants\Setting::VERIFY_EMAIL, self::ERR_VERIFY_EMAIL_INVALID);
        $this->checkType(Constants\Setting::VIEW_LANGUAGE, self::ERR_VIEW_LANGUAGE_INVALID);
        $this->checkType(Constants\Setting::VISIBLE_AUCTION_STATUSES, self::ERR_VISIBLE_AUCTION_STATUSES_INVALID);
        $this->checkType(Constants\Setting::WAVEBID_ENDPOINT, self::ERR_WAVEBID_ENDPOINT_INVALID);
        $this->checkType(Constants\Setting::WAVEBID_UAT, self::ERR_WAVEBID_UAT_INVALID);
        $this->checkType(Constants\Setting::LOCALE, self::ERR_LOCALE_INVALID);
        $this->checkType(Constants\Setting::ADMIN_LANGUAGE, self::ERR_ADMIN_LANGUAGE_INVALID);
        $this->checkType(Constants\Setting::INVOICE_HP_TAX_SCHEMA_ID, self::ERR_INVOICE_HP_TAX_SCHEMA_ID_INVALID);
        $this->checkType(Constants\Setting::INVOICE_BP_TAX_SCHEMA_ID, self::ERR_INVOICE_BP_TAX_SCHEMA_ID_INVALID);
        $this->checkType(Constants\Setting::INVOICE_SERVICES_TAX_SCHEMA_ID, self::ERR_INVOICE_SERVICES_TAX_SCHEMA_ID_INVALID);
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkType(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $dto->{$property};
        $isValid = true;
        $normalizer = $this->context->getNormalizer();
        $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
        $propertyMetadata = $this->createPropertyMetadataProvider();
        switch ($propertyMetadata->getType($property)) {
            case Constants\Type::T_FLOAT:
                if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                    $message = 'Should be a number';
                }
                $isValid = $normalizer->isFloat($value);
                break;
            case Constants\Type::T_INTEGER:
                if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                    $message = 'Should be an integer';
                }
                $isValid = $normalizer->isInteger($value);
                break;
            case Constants\Type::T_BOOL:
                if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                    $message = 'Should be a boolean';
                }
                $isValid = $normalizer->isBoolean($value);
                break;
            case Constants\Type::T_ARRAY:
                if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                    $message = 'Should be a list';
                }
                $isValid = $normalizer->isList($value);
                break;
            case Constants\Type::T_STRING:
                if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                    $message = 'Should be a string';
                }
                $isValid = is_string($value);
                break;
        }

        $knownSet = $propertyMetadata->getKnownSet($property);
        if (!empty($knownSet) && !in_array($value, $knownSet, false)) {
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'Value is not in known list';
            }
            $isValid = false;
        }
        if (!$isValid) {
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkPositive(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $this->context->getNormalizer()->normalize($property, $dto->{$property});
        if (!NumberValidator::new()->isRealPositive($value)) {
            $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'Should be positive';
            }
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkPositiveOrZero(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $this->context->getNormalizer()->normalize($property, $dto->{$property});
        if ($value < 0) {
            $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'Should be positive or zero';
            }
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkIntPositiveOrZeroNotOne(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $this->context->getNormalizer()->normalize($property, $dto->{$property});
        if ((int)$value < 0 || (int)$value === 1) {
            $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'Should be positive or zero and not one';
            }
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     * @param array $parameters
     */
    private function checkRange(string $property, int $errorCode, array $parameters): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $this->context->getNormalizer()->normalize($property, $dto->{$property});
        if (
            (
                isset($parameters['min'])
                && Floating::lt($value, $parameters['min'])
            ) || (
                isset($parameters['max'])
                && Floating::gt($value, $parameters['max'])
            )
        ) {
            $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'Should be in range';
                if (isset($parameters['min'])) {
                    $message .= ' Min: ' . $parameters['min'];
                }
                if (isset($parameters['max'])) {
                    $message .= ' Max: ' . $parameters['max'];
                }
            }
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkRequired(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!isset($dto->{$property})) {
            return;
        }
        if (in_array($dto->{$property}, [null, ''], true)) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     * @param array $knownSet
     */
    private function checkChoice(string $property, int $errorCode, array $knownSet): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        $value = $this->context->getNormalizer()->normalize($property, $dto->{$property});
        if (!in_array($value, $knownSet, true)) {
            $message = $this->getResultStatusCollector()->getErrorMessageByCodeAmongAll($errorCode);
            if ($message === self::INVALID_FORMAT_DEFAULT_MESSAGE) {
                $message = 'The value you selected is not a valid choice';
            }
            $this->getResultStatusCollector()->addError($errorCode, $message);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkFairWarningFormat(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        if (!$this->createHybridFairWarningValidator()->validateFormat($dto->{$property})) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkEmail(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!$this->isPropertyExistAndNotEmpty($property)) {
            return;
        }
        if (!EmailAddressChecker::new()->isEmail($dto->{$property})) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param int $warningCode
     */
    private function checkCcAuthOnAuctionRegistration(int $warningCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::PLACE_BID_REQUIRE_CC})
            && !isset($dto->{Constants\Setting::ON_AUCTION_REGISTRATION})
            && !isset($dto->{Constants\Setting::AUTHORIZATION_USE})
        ) {
            return;
        }

        $placeBidRequireCc = $this->retrieveOrLoadParameter(Constants\Setting::PLACE_BID_REQUIRE_CC);
        $onAuctionRegistration = $this->retrieveOrLoadParameter(Constants\Setting::ON_AUCTION_REGISTRATION);
        $authorizationUse = $this->retrieveOrLoadParameter(Constants\Setting::AUTHORIZATION_USE);
        if (
            $placeBidRequireCc
            && $onAuctionRegistration
            && $authorizationUse === Constants\SettingUser::PAY_NO_AUTHORIZATION
        ) {
            $this->getResultStatusCollector()->addWarning($warningCode);
        }
    }

    /**
     * @param int $errCode
     */
    public function checkOnAuctionRegistrationAmount(int $errCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::PLACE_BID_REQUIRE_CC})
            && !isset($dto->{Constants\Setting::ON_AUCTION_REGISTRATION})
            && !isset($dto->{Constants\Setting::ON_AUCTION_REGISTRATION_AMOUNT})
        ) {
            return;
        }

        $placeBidRequireCc = $this->retrieveOrLoadParameter(Constants\Setting::PLACE_BID_REQUIRE_CC);
        $onAuctionRegistration = $this->retrieveOrLoadParameter(Constants\Setting::ON_AUCTION_REGISTRATION);
        $onAuctionRegistrationAmount = (float)$this->retrieveOrLoadParameter(Constants\Setting::ON_AUCTION_REGISTRATION_AMOUNT);
        if (
            $placeBidRequireCc
            && in_array(
                $onAuctionRegistration,
                [Constants\Billing::CCV_AUTH, Constants\Billing::CCV_CAPTURE],
                true
            )
            && Floating::eq($onAuctionRegistrationAmount, 0)
        ) {
            $this->getResultStatusCollector()->addError($errCode);
        }
    }

    public function checkSettlementCheckHeightRequired(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!isset($dto->{Constants\Setting::STLM_CHECK_FILE})) {
            return;
        }

        $checkFile = $this->retrieveOrLoadParameter(Constants\Setting::STLM_CHECK_FILE);
        $checkHeight = $this->retrieveOrLoadParameter(Constants\Setting::STLM_CHECK_HEIGHT);
        if ($checkFile && !$checkHeight) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param int $errorCode
     */
    private function checkOnRegistration(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::REGISTRATION_REQUIRE_CC})
            && !isset($dto->{Constants\Setting::ON_REGISTRATION})
            && !isset($dto->{Constants\Setting::AUTHORIZATION_USE})
        ) {
            return;
        }

        $requireCc = $this->retrieveOrLoadParameter(Constants\Setting::REGISTRATION_REQUIRE_CC);
        $onRegistration = $this->retrieveOrLoadParameter(Constants\Setting::ON_REGISTRATION);
        $authUse = $this->retrieveOrLoadParameter(Constants\Setting::AUTHORIZATION_USE);
        if (
            $requireCc
            && $onRegistration
            && $authUse === Constants\SettingUser::PAY_NO_AUTHORIZATION
        ) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param int $errorCode
     */
    private function checkOnRegistrationAmount(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::REGISTRATION_REQUIRE_CC})
            && !isset($dto->{Constants\Setting::ON_REGISTRATION})
            && !isset($dto->{Constants\Setting::ON_REGISTRATION_AMOUNT})
        ) {
            return;
        }

        $requireCc = $this->retrieveOrLoadParameter(Constants\Setting::REGISTRATION_REQUIRE_CC);
        $onRegistration = $this->retrieveOrLoadParameter(Constants\Setting::ON_REGISTRATION);
        $amount = (float)$this->retrieveOrLoadParameter(Constants\Setting::ON_REGISTRATION_AMOUNT);
        if (
            $requireCc
            && $onRegistration
            && Floating::eq($amount, 0)
        ) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param int $errorCode
     */
    private function checkDefaultCountryCode(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::HIDE_COUNTRY_CODE_SELECTION})
            && !isset($dto->{Constants\Setting::DEFAULT_COUNTRY_CODE})
        ) {
            return;
        }

        $hideCountryCodeSelection = $this->retrieveOrLoadParameter(Constants\Setting::HIDE_COUNTRY_CODE_SELECTION);
        $defaultCountryCode = $this->retrieveOrLoadParameter(Constants\Setting::DEFAULT_COUNTRY_CODE);
        if ($hideCountryCodeSelection && (int)$defaultCountryCode === 0) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param int $errorCode
     */
    private function checkNmiVaultOption(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::NMI_VAULT})
            && !isset($dto->{Constants\Setting::NMI_VAULT_OPTION})
        ) {
            return;
        }

        if (
            !$this->retrieveOrLoadParameter(Constants\Setting::NMI_VAULT_OPTION)
            && $this->retrieveOrLoadParameter(Constants\Setting::NMI_VAULT)
        ) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    /**
     * @param string $property
     * @param int $errorCode
     */
    private function checkNumericLotCustomFieldChoice(string $property, int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (!isset($dto->{$property})) {
            return;
        }
        $lotCustomFields = $this->context->getDataProvider()->loadLotItemNumericCustomFields();
        $lotCustomFieldsIds = array_map(
            static function (LotItemCustField $lotCustomField) {
                return $lotCustomField->Id;
            },
            $lotCustomFields
        );
        $this->checkChoice($property, $errorCode, $lotCustomFieldsIds);
    }

    /**
     * @param int $errorCode
     */
    private function checkPaypalEmail(int $errorCode): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::ENABLE_PAYPAL_PAYMENTS})
            && !isset($dto->{Constants\Setting::PAYPAL_EMAIL})
        ) {
            return;
        }

        if (
            !$this->retrieveOrLoadParameter(Constants\Setting::PAYPAL_EMAIL)
            && $this->retrieveOrLoadParameter(Constants\Setting::ENABLE_PAYPAL_PAYMENTS)
        ) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    private function checkNetAuthCredentials(): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::AUTHORIZATION_USE})
            && !isset($dto->{Constants\Setting::AUTH_NET_LOGIN})
            && !isset($dto->{Constants\Setting::AUTH_NET_TRANKEY})
        ) {
            return;
        }
        if ($this->retrieveOrLoadParameter(Constants\Setting::AUTHORIZATION_USE) === Constants\SettingUser::PAY_AUTHORIZE_NET) {
            $this->checkRequired(Constants\Setting::AUTH_NET_LOGIN, self::ERR_AUTH_NET_LOGIN_REQUIRED);
            $this->checkRequired(Constants\Setting::AUTH_NET_TRANKEY, self::ERR_AUTH_NET_TRANKEY_REQUIRED);
        }
    }

    private function checkLandingPageUrl(): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::LANDING_PAGE})
            && !isset($dto->{Constants\Setting::LANDING_PAGE_URL})
        ) {
            return;
        }
        if ($this->retrieveOrLoadParameter(Constants\Setting::LANDING_PAGE) === Constants\SettingUi::LP_OTHER) {
            $this->checkRequired(Constants\Setting::LANDING_PAGE_URL, self::ERR_LANDING_PAGE_URL_REQUIRED);
        }
    }

    /**
     * @param int $errorCode
     */
    private function checkAuctionParametersExistence(int $errorCode): void
    {
        $isFound = $this->context->getDataProvider()->existAuctionParameters($this->context->getSystemAccountId());
        if (!$isFound) {
            $this->getResultStatusCollector()->addError($errorCode);
        }
    }

    private function checkGraphQlCorsAllowedOrigins(): void
    {
        $dto = $this->context->getDto();
        if (
            !isset($dto->{Constants\Setting::GRAPHQL_CORS_ALLOWED_ORIGINS})
            || trim($dto->{Constants\Setting::GRAPHQL_CORS_ALLOWED_ORIGINS}) === ''
        ) {
            return;
        }
        $origins = explode(',', $dto->{Constants\Setting::GRAPHQL_CORS_ALLOWED_ORIGINS});
        $validator = new HostnameValidator([
            'allow' => HostnameValidator::ALLOW_DNS | HostnameValidator::ALLOW_IP | HostnameValidator::ALLOW_LOCAL,
            'useIdnCheck' => false,
            'useTldCheck' => false,
        ]);
        foreach ($origins as $origin) {
            $origin = trim($origin);
            if (!preg_match('#^https?://#i', $origin)) {
                $this->getResultStatusCollector()->addError(
                    self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_URL_SCHEME_INVALID,
                    sprintf(self::ERROR_MESSAGES[self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_URL_SCHEME_INVALID], $origin)
                );
            } else {
                $hostName = preg_replace('#^(https?://)([^:]+)(:\d+)?$#i', '$2', $origin);
                $hostNameWithoutWildcard = str_replace('*', 'wildcard', $hostName);
                if (!$validator->isValid($hostNameWithoutWildcard)) {
                    $this->getResultStatusCollector()->addError(
                        self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_HOST_INVALID,
                        sprintf(self::ERROR_MESSAGES[self::ERR_GRAPHQL_CORS_ALLOW_ORIGIN_HOST_INVALID], $hostName)
                    );
                }
            }
        }
    }

    private function checkTaxSchema(): void
    {
        $dto = $this->context->getDto();
        $dataProvider = $this->context->getDataProvider();
        $samTaxDefaultCountry = $dto->{Constants\Setting::SAM_TAX_DEFAULT_COUNTRY} ?? '';

        if (
            isset($dto->{Constants\Setting::INVOICE_HP_TAX_SCHEMA_ID})
            && $dto->{Constants\Setting::INVOICE_HP_TAX_SCHEMA_ID}
        ) {
            $hpTaxSchemaRow = $dataProvider->loadHpTaxSchemaRow(
                (int)$dto->{Constants\Setting::INVOICE_HP_TAX_SCHEMA_ID},
                $this->context->getSystemAccountId()
            );
            $isHpTaxSchemaExist = $hpTaxSchemaRow && $hpTaxSchemaRow['id'];
            if (!$isHpTaxSchemaExist) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_HP_TAX_SCHEMA_ID_INVALID);
            } elseif (
                $samTaxDefaultCountry
                && $samTaxDefaultCountry !== $hpTaxSchemaRow['country']
            ) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_HP_TAX_SCHEMA_COUNTRY_MISMATCH);
            }
        }

        if (
            isset($dto->{Constants\Setting::INVOICE_BP_TAX_SCHEMA_ID})
            && $dto->{Constants\Setting::INVOICE_BP_TAX_SCHEMA_ID}
        ) {
            $bpTaxSchemaRow = $dataProvider->loadBpTaxSchemaRow(
                (int)$dto->{Constants\Setting::INVOICE_BP_TAX_SCHEMA_ID},
                $this->context->getSystemAccountId()
            );
            $isBpTaxSchemaExist = $bpTaxSchemaRow && $bpTaxSchemaRow['id'];
            if (!$isBpTaxSchemaExist) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_BP_TAX_SCHEMA_ID_INVALID);
            } elseif (
                $samTaxDefaultCountry
                && $samTaxDefaultCountry !== $bpTaxSchemaRow['country']
            ) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_BP_TAX_SCHEMA_COUNTRY_MISMATCH);
            }
        }

        if (
            isset($dto->{Constants\Setting::INVOICE_SERVICES_TAX_SCHEMA_ID})
            && $dto->{Constants\Setting::INVOICE_SERVICES_TAX_SCHEMA_ID}
        ) {
            $servicesTaxSchemaRow = $dataProvider->loadServicesTaxSchemaRow(
                (int)$dto->{Constants\Setting::INVOICE_SERVICES_TAX_SCHEMA_ID},
                $this->context->getSystemAccountId()
            );
            $isServicesTaxSchemaExist = $servicesTaxSchemaRow && $servicesTaxSchemaRow['id'];
            if (!$isServicesTaxSchemaExist) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_SERVICES_TAX_SCHEMA_ID_INVALID);
            } elseif (
                $samTaxDefaultCountry
                && $samTaxDefaultCountry !== $servicesTaxSchemaRow['country']
            ) {
                $this->getResultStatusCollector()->addError(self::ERR_INVOICE_SERVICES_TAX_SCHEMA_COUNTRY_MISMATCH);
            }
        }
    }

    /**
     * @return array
     */
    private function detectAvailableDomainModes(): array
    {
        $modes = [
            Constants\AuctionDomainMode::ANY_DOMAIN,
            Constants\AuctionDomainMode::ALWAYS_SUB_DOMAIN
        ];
        $isAvailableOptionAlwaysMainDomain = $this->context->getDataProvider()
            ->isAvailableOptionAlwaysMainDomain($this->context->getSystemAccount());
        if ($isAvailableOptionAlwaysMainDomain) {
            $modes[] = Constants\AuctionDomainMode::ALWAYS_MAIN_DOMAIN;
        }
        return $modes;
    }

    /**
     * @param string $parameter
     * @return mixed
     */
    private function retrieveOrLoadParameter(string $parameter): mixed
    {
        if (isset($this->context->getDto()->{$parameter})) {
            $value = $this->context->getDto()->{$parameter};
            return $this->context->getNormalizer()->normalize($parameter, $value);
        }
        $contextAccountId = $this->context->getSystemAccountId();
        return $this->context->getDataProvider()->getAuctionParameter($parameter, $contextAccountId);
    }

    /**
     * @param string $property
     * @return bool
     */
    private function isPropertyExistAndNotEmpty(string $property): bool
    {
        $dto = $this->context->getDto();
        if (!isset($dto->{$property})) {
            return false;
        }
        $value = $dto->{$property};
        if (is_numeric($value) || is_bool($value)) {
            return true;
        }
        if (!$value) {
            return false;
        }
        return true;
    }
}
